{"version":3,"file":"CaseDetailPage-6517b44f.js","sources":["../../src/components/features/VitalSignsComponent.tsx","../../src/components/features/ChatComponent.tsx","../../src/components/features/TreatmentComponent.tsx","../../src/hooks/useGeolocation.ts","../../src/components/features/LocationTracker.tsx","../../src/services/buildingInfoService.ts","../../src/components/features/BuildingInfo/ElevatorInfoCard.tsx","../../src/components/features/BuildingInfo/StaircaseInfoCard.tsx","../../src/components/features/BuildingInfo/ExitInfoCard.tsx","../../src/components/features/BuildingInfo/AccessibilityBadge.tsx","../../src/components/features/BuildingInfo/BuildingInfoComponent.tsx","../../src/pages/CaseDetailPage.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Button } from '@/components/common';\nimport { VitalSign } from '@/types';\nimport { config } from '@/config/environment';\n\ninterface VitalSignsComponentProps {\n  caseId: string;\n  className?: string;\n}\n\n// デモ用のバイタルサイン生成\nconst generateDemoVitalSign = (): VitalSign => {\n  const now = new Date();\n  return {\n    id: `vital-${Date.now()}`,\n    timestamp: {\n      toDate: () => now,\n      toMillis: () => now.getTime(),\n      seconds: Math.floor(now.getTime() / 1000),\n      nanoseconds: 0\n    } as any,\n    hr: 60 + Math.floor(Math.random() * 40), // 60-100\n    bp_s: 110 + Math.floor(Math.random() * 30), // 110-140\n    bp_d: 60 + Math.floor(Math.random() * 20), // 60-80\n    spo2: 94 + Math.floor(Math.random() * 6), // 94-99\n    recordedBy: 'demo-user',\n    caseId: ''\n  };\n};\n\nexport const VitalSignsComponent: React.FC<VitalSignsComponentProps> = ({\n  caseId,\n  className = ''\n}) => {\n  const [vitalSigns, setVitalSigns] = useState<VitalSign[]>([]);\n  const [showForm, setShowForm] = useState(false);\n  const [newVital, setNewVital] = useState({\n    hr: '',\n    bp_s: '',\n    bp_d: '',\n    spo2: ''\n  });\n\n  // デモモードの場合、初期データを設定\n  useEffect(() => {\n    if (config.demoMode) {\n      const demoVitals = [\n        generateDemoVitalSign(),\n        generateDemoVitalSign(),\n        generateDemoVitalSign()\n      ];\n      setVitalSigns(demoVitals);\n    }\n  }, []);\n\n  const handleAddVitalSign = () => {\n    if (!newVital.hr || !newVital.bp_s || !newVital.bp_d || !newVital.spo2) {\n      alert('すべての項目を入力してください');\n      return;\n    }\n\n    const vital: VitalSign = {\n      id: `vital-${Date.now()}`,\n      timestamp: {\n        toDate: () => new Date(),\n        toMillis: () => Date.now(),\n        seconds: Math.floor(Date.now() / 1000),\n        nanoseconds: 0\n      } as any,\n      hr: parseInt(newVital.hr),\n      bp_s: parseInt(newVital.bp_s),\n      bp_d: parseInt(newVital.bp_d),\n      spo2: parseInt(newVital.spo2),\n      recordedBy: 'current-user',\n      caseId\n    };\n\n    setVitalSigns([vital, ...vitalSigns]);\n    setNewVital({ hr: '', bp_s: '', bp_d: '', spo2: '' });\n    setShowForm(false);\n  };\n\n  const formatTime = (timestamp: any) => {\n    const date = timestamp.toDate ? timestamp.toDate() : new Date(timestamp.seconds * 1000);\n    return date.toLocaleTimeString('ja-JP', { hour: '2-digit', minute: '2-digit' });\n  };\n\n  return (\n    <div className={`${className}`}>\n      <div className=\"flex justify-between items-center mb-4\">\n        <h4 className=\"text-sm font-medium text-gray-900\">バイタルサイン</h4>\n        <Button\n          size=\"sm\"\n          variant=\"outline\"\n          onClick={() => setShowForm(!showForm)}\n        >\n          記録追加\n        </Button>\n      </div>\n\n      {showForm && (\n        <div className=\"mb-4 p-3 bg-gray-50 rounded-lg\">\n          <div className=\"grid grid-cols-2 gap-3\">\n            <div>\n              <label className=\"block text-xs text-gray-600 mb-1\">心拍数 (bpm)</label>\n              <input\n                type=\"number\"\n                value={newVital.hr}\n                onChange={(e) => setNewVital({ ...newVital, hr: e.target.value })}\n                className=\"w-full px-2 py-1 text-sm border rounded\"\n                placeholder=\"70\"\n              />\n            </div>\n            <div>\n              <label className=\"block text-xs text-gray-600 mb-1\">SpO2 (%)</label>\n              <input\n                type=\"number\"\n                value={newVital.spo2}\n                onChange={(e) => setNewVital({ ...newVital, spo2: e.target.value })}\n                className=\"w-full px-2 py-1 text-sm border rounded\"\n                placeholder=\"98\"\n              />\n            </div>\n            <div>\n              <label className=\"block text-xs text-gray-600 mb-1\">収縮期血圧</label>\n              <input\n                type=\"number\"\n                value={newVital.bp_s}\n                onChange={(e) => setNewVital({ ...newVital, bp_s: e.target.value })}\n                className=\"w-full px-2 py-1 text-sm border rounded\"\n                placeholder=\"120\"\n              />\n            </div>\n            <div>\n              <label className=\"block text-xs text-gray-600 mb-1\">拡張期血圧</label>\n              <input\n                type=\"number\"\n                value={newVital.bp_d}\n                onChange={(e) => setNewVital({ ...newVital, bp_d: e.target.value })}\n                className=\"w-full px-2 py-1 text-sm border rounded\"\n                placeholder=\"80\"\n              />\n            </div>\n          </div>\n          <div className=\"flex justify-end space-x-2 mt-3\">\n            <Button\n              size=\"sm\"\n              variant=\"outline\"\n              onClick={() => {\n                setShowForm(false);\n                setNewVital({ hr: '', bp_s: '', bp_d: '', spo2: '' });\n              }}\n            >\n              キャンセル\n            </Button>\n            <Button size=\"sm\" onClick={handleAddVitalSign}>\n              保存\n            </Button>\n          </div>\n        </div>\n      )}\n\n      <div className=\"space-y-2 max-h-60 overflow-y-auto\">\n        {vitalSigns.length === 0 ? (\n          <p className=\"text-sm text-gray-500 text-center py-4\">\n            バイタルサインの記録がありません\n          </p>\n        ) : (\n          vitalSigns.map((vital) => (\n            <div key={vital.id} className=\"bg-gray-50 rounded p-3 text-sm\">\n              <div className=\"flex justify-between items-start\">\n                <div className=\"grid grid-cols-2 gap-x-4 gap-y-1\">\n                  <div>\n                    <span className=\"text-gray-600\">HR:</span>{' '}\n                    <span className=\"font-medium\">{vital.hr} bpm</span>\n                  </div>\n                  <div>\n                    <span className=\"text-gray-600\">SpO2:</span>{' '}\n                    <span className=\"font-medium\">{vital.spo2}%</span>\n                  </div>\n                  <div>\n                    <span className=\"text-gray-600\">BP:</span>{' '}\n                    <span className=\"font-medium\">\n                      {vital.bp_s}/{vital.bp_d} mmHg\n                    </span>\n                  </div>\n                </div>\n                <span className=\"text-xs text-gray-500\">\n                  {formatTime(vital.timestamp)}\n                </span>\n              </div>\n            </div>\n          ))\n        )}\n      </div>\n    </div>\n  );\n};","import React, { useState, useEffect, useRef } from 'react';\nimport { Button } from '@/components/common';\nimport { Message } from '@/types';\nimport { config } from '@/config/environment';\nimport { useAuthStore } from '@/stores';\n\ninterface ChatComponentProps {\n  caseId: string;\n  className?: string;\n}\n\n// プリセットメッセージ\nconst PRESET_MESSAGES = [\n  '現場到着しました',\n  '患者接触しました',\n  '搬送開始します',\n  '病院到着しました',\n  '処置開始しました',\n  '追加支援が必要です'\n];\n\n// デモ用メッセージ生成\nconst generateDemoMessages = (): Message[] => {\n  const now = new Date();\n  return [\n    {\n      id: 'msg-1',\n      timestamp: {\n        toDate: () => new Date(now.getTime() - 15 * 60 * 1000),\n        toMillis: () => now.getTime() - 15 * 60 * 1000,\n        seconds: Math.floor((now.getTime() - 15 * 60 * 1000) / 1000),\n        nanoseconds: 0\n      } as any,\n      senderId: 'doctor-001',\n      senderName: '山田 太郎',\n      text: '現場に向かっています。到着予定時刻は10:15です。',\n      caseId: '',\n      messageType: 'text'\n    },\n    {\n      id: 'msg-2',\n      timestamp: {\n        toDate: () => new Date(now.getTime() - 10 * 60 * 1000),\n        toMillis: () => now.getTime() - 10 * 60 * 1000,\n        seconds: Math.floor((now.getTime() - 10 * 60 * 1000) / 1000),\n        nanoseconds: 0\n      } as any,\n      senderId: 'hospital-001',\n      senderName: '佐藤 花子',\n      text: '了解しました。受け入れ準備を開始します。',\n      caseId: '',\n      messageType: 'text'\n    },\n    {\n      id: 'msg-3',\n      timestamp: {\n        toDate: () => new Date(now.getTime() - 5 * 60 * 1000),\n        toMillis: () => now.getTime() - 5 * 60 * 1000,\n        seconds: Math.floor((now.getTime() - 5 * 60 * 1000) / 1000),\n        nanoseconds: 0\n      } as any,\n      senderId: 'doctor-001',\n      senderName: '山田 太郎',\n      text: '現場到着しました',\n      caseId: '',\n      messageType: 'preset'\n    }\n  ];\n};\n\nexport const ChatComponent: React.FC<ChatComponentProps> = ({\n  caseId,\n  className = ''\n}) => {\n  const { userInfo } = useAuthStore();\n  const [messages, setMessages] = useState<Message[]>([]);\n  const [newMessage, setNewMessage] = useState('');\n  const [showPresets, setShowPresets] = useState(false);\n  const [isRecording, setIsRecording] = useState(false);\n  const [recognition, setRecognition] = useState<any>(null);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n\n  // デモモードの場合、初期メッセージを設定\n  useEffect(() => {\n    if (config.demoMode) {\n      setMessages(generateDemoMessages());\n    }\n  }, []);\n\n  // 音声認識の初期化\n  useEffect(() => {\n    if (typeof window !== 'undefined' && 'webkitSpeechRecognition' in window) {\n      const SpeechRecognition = (window as any).webkitSpeechRecognition;\n      const speechRecognition = new SpeechRecognition();\n      \n      speechRecognition.continuous = false;\n      speechRecognition.interimResults = false;\n      speechRecognition.lang = 'ja-JP';\n\n      speechRecognition.onresult = (event: any) => {\n        const transcript = event.results[0][0].transcript;\n        setNewMessage(transcript);\n        setIsRecording(false);\n      };\n\n      speechRecognition.onend = () => {\n        setIsRecording(false);\n      };\n\n      speechRecognition.onerror = (event: any) => {\n        console.error('Speech recognition error:', event.error);\n        setIsRecording(false);\n      };\n\n      setRecognition(speechRecognition);\n    }\n  }, []);\n\n  // 新しいメッセージが追加されたら自動スクロール\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  }, [messages]);\n\n  const formatTime = (timestamp: any) => {\n    const date = timestamp.toDate ? timestamp.toDate() : new Date(timestamp.seconds * 1000);\n    return date.toLocaleTimeString('ja-JP', { hour: '2-digit', minute: '2-digit' });\n  };\n\n  const sendMessage = (text: string, messageType: 'text' | 'preset' = 'text') => {\n    if (!text.trim()) return;\n\n    const message: Message = {\n      id: `msg-${Date.now()}`,\n      timestamp: {\n        toDate: () => new Date(),\n        toMillis: () => Date.now(),\n        seconds: Math.floor(Date.now() / 1000),\n        nanoseconds: 0\n      } as any,\n      senderId: userInfo?.uid || 'demo-user',\n      senderName: userInfo?.name || 'デモユーザー',\n      text: text.trim(),\n      caseId,\n      messageType\n    };\n\n    setMessages([...messages, message]);\n    setNewMessage('');\n    setShowPresets(false);\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      sendMessage(newMessage);\n    }\n  };\n\n  const startRecording = () => {\n    if (recognition && !isRecording) {\n      setIsRecording(true);\n      recognition.start();\n    }\n  };\n\n  const stopRecording = () => {\n    if (recognition && isRecording) {\n      recognition.stop();\n      setIsRecording(false);\n    }\n  };\n\n  return (\n    <div className={`flex flex-col h-full ${className}`}>\n      {/* メッセージ表示エリア */}\n      <div className=\"flex-1 overflow-y-auto mb-4 space-y-2 min-h-0\">\n        {messages.length === 0 ? (\n          <p className=\"text-sm text-gray-500 text-center py-8\">\n            メッセージがありません\n          </p>\n        ) : (\n          messages.map((message) => {\n            const isOwnMessage = message.senderId === userInfo?.uid;\n            return (\n              <div\n                key={message.id}\n                className={`flex ${isOwnMessage ? 'justify-end' : 'justify-start'}`}\n              >\n                <div\n                  className={`max-w-xs lg:max-w-md px-4 py-2 rounded-lg ${\n                    isOwnMessage\n                      ? 'bg-medical-primary text-white'\n                      : 'bg-gray-200 text-gray-900'\n                  }`}\n                >\n                  <div className=\"text-xs opacity-75 mb-1\">\n                    {message.senderName} - {formatTime(message.timestamp)}\n                  </div>\n                  <div className=\"text-sm break-words\">\n                    {message.messageType === 'preset' && (\n                      <span className=\"inline-block mr-1\">📌</span>\n                    )}\n                    {message.text}\n                  </div>\n                </div>\n              </div>\n            );\n          })\n        )}\n        <div ref={messagesEndRef} />\n      </div>\n\n      {/* プリセットメッセージ */}\n      {showPresets && (\n        <div className=\"mb-2 p-2 bg-gray-50 rounded-lg\">\n          <div className=\"text-xs text-gray-600 mb-2\">定型メッセージ:</div>\n          <div className=\"grid grid-cols-2 gap-2\">\n            {PRESET_MESSAGES.map((preset) => (\n              <button\n                key={preset}\n                onClick={() => sendMessage(preset, 'preset')}\n                className=\"text-left text-sm px-3 py-2 bg-white border rounded hover:bg-gray-50 transition-colors\"\n              >\n                {preset}\n              </button>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* メッセージ入力エリア */}\n      <div className=\"border-t pt-4\">\n        <div className=\"flex space-x-2\">\n          <Button\n            size=\"sm\"\n            variant=\"outline\"\n            onClick={() => setShowPresets(!showPresets)}\n            className=\"flex-shrink-0\"\n          >\n            定型\n          </Button>\n          \n          {/* 音声認識ボタン */}\n          {recognition && (\n            <Button\n              size=\"sm\"\n              variant={isRecording ? \"danger\" : \"outline\"}\n              onClick={isRecording ? stopRecording : startRecording}\n              className=\"flex-shrink-0\"\n              title={isRecording ? '録音停止' : '音声入力'}\n            >\n              {isRecording ? (\n                <svg className=\"w-4 h-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                  <rect x=\"7\" y=\"7\" width=\"6\" height=\"6\" rx=\"1\" />\n                </svg>\n              ) : (\n                <svg className=\"w-4 h-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                  <path fillRule=\"evenodd\" d=\"M7 4a3 3 0 016 0v4a3 3 0 11-6 0V4zm4 10.93A7.001 7.001 0 0017 8a1 1 0 10-2 0A5 5 0 015 8a1 1 0 00-2 0 7.001 7.001 0 006 6.93V17H6a1 1 0 100 2h8a1 1 0 100-2h-3v-2.07z\" clipRule=\"evenodd\" />\n                </svg>\n              )}\n            </Button>\n          )}\n          \n          <input\n            type=\"text\"\n            value={newMessage}\n            onChange={(e) => setNewMessage(e.target.value)}\n            onKeyPress={handleKeyPress}\n            placeholder={isRecording ? '音声入力中...' : 'メッセージを入力...'}\n            className=\"flex-1 px-3 py-2 text-sm border rounded-lg focus:outline-none focus:ring-2 focus:ring-medical-primary\"\n            disabled={isRecording}\n          />\n          <Button\n            size=\"sm\"\n            onClick={() => sendMessage(newMessage)}\n            disabled={!newMessage.trim() || isRecording}\n          >\n            送信\n          </Button>\n        </div>\n        \n        {/* 音声認識の状態表示 */}\n        {isRecording && (\n          <div className=\"mt-2 text-xs text-gray-600 flex items-center\">\n            <div className=\"w-2 h-2 bg-red-600 rounded-full mr-2 animate-pulse\"></div>\n            音声を認識しています...\n          </div>\n        )}\n        \n        {/* 音声認識が利用できない場合の表示 */}\n        {!recognition && (\n          <div className=\"mt-2 text-xs text-gray-500\">\n            ※ このブラウザでは音声認識がサポートされていません\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};","import React, { useState, useEffect } from 'react';\nimport { Button } from '@/components/common';\nimport { Treatment } from '@/types';\nimport { config } from '@/config/environment';\n\ninterface TreatmentComponentProps {\n  caseId: string;\n  className?: string;\n}\n\n// 一般的な処置のプリセット\nconst PRESET_TREATMENTS = [\n  'バイタル測定',\n  '酸素投与開始',\n  '静脈路確保',\n  '心電図モニタリング開始',\n  '体位変換',\n  '体温管理',\n  '創部処置',\n  '疼痛管理',\n  '薬剤投与',\n  '気道確保'\n];\n\n// デモ用処置データ生成\nconst generateDemoTreatments = (): Treatment[] => {\n  const now = new Date();\n  return [\n    {\n      id: 'treatment-1',\n      timestamp: {\n        toDate: () => new Date(now.getTime() - 20 * 60 * 1000),\n        toMillis: () => now.getTime() - 20 * 60 * 1000,\n        seconds: Math.floor((now.getTime() - 20 * 60 * 1000) / 1000),\n        nanoseconds: 0\n      } as any,\n      name: 'バイタル測定',\n      details: 'HR: 85bpm, BP: 120/80mmHg, SpO2: 98%',\n      recordedBy: '山田 太郎',\n      caseId: ''\n    },\n    {\n      id: 'treatment-2',\n      timestamp: {\n        toDate: () => new Date(now.getTime() - 15 * 60 * 1000),\n        toMillis: () => now.getTime() - 15 * 60 * 1000,\n        seconds: Math.floor((now.getTime() - 15 * 60 * 1000) / 1000),\n        nanoseconds: 0\n      } as any,\n      name: '酸素投与開始',\n      details: 'マスク 4L/min',\n      recordedBy: '山田 太郎',\n      caseId: ''\n    }\n  ];\n};\n\nexport const TreatmentComponent: React.FC<TreatmentComponentProps> = ({\n  caseId,\n  className = ''\n}) => {\n  const [treatments, setTreatments] = useState<Treatment[]>([]);\n  const [showForm, setShowForm] = useState(false);\n  const [showPresets, setShowPresets] = useState(false);\n  const [newTreatment, setNewTreatment] = useState({\n    name: '',\n    details: ''\n  });\n\n  // デモモードの場合、初期データを設定\n  useEffect(() => {\n    if (config.demoMode) {\n      setTreatments(generateDemoTreatments());\n    }\n  }, []);\n\n  const formatTime = (timestamp: any) => {\n    const date = timestamp.toDate ? timestamp.toDate() : new Date(timestamp.seconds * 1000);\n    return date.toLocaleTimeString('ja-JP', { hour: '2-digit', minute: '2-digit' });\n  };\n\n  const addTreatment = (name: string, details: string = '') => {\n    if (!name.trim()) {\n      alert('処置名を入力してください');\n      return;\n    }\n\n    const treatment: Treatment = {\n      id: `treatment-${Date.now()}`,\n      timestamp: {\n        toDate: () => new Date(),\n        toMillis: () => Date.now(),\n        seconds: Math.floor(Date.now() / 1000),\n        nanoseconds: 0\n      } as any,\n      name: name.trim(),\n      details: details.trim(),\n      recordedBy: 'current-user',\n      caseId\n    };\n\n    setTreatments([treatment, ...treatments]);\n    setNewTreatment({ name: '', details: '' });\n    setShowForm(false);\n    setShowPresets(false);\n  };\n\n  const handlePresetSelect = (preset: string) => {\n    setNewTreatment({ ...newTreatment, name: preset });\n    setShowPresets(false);\n  };\n\n  return (\n    <div className={`${className}`}>\n      <div className=\"flex justify-between items-center mb-4\">\n        <h4 className=\"text-sm font-medium text-gray-900\">処置記録</h4>\n        <Button\n          size=\"sm\"\n          variant=\"outline\"\n          onClick={() => setShowForm(!showForm)}\n        >\n          記録追加\n        </Button>\n      </div>\n\n      {showForm && (\n        <div className=\"mb-4 p-3 bg-gray-50 rounded-lg\">\n          <div className=\"space-y-3\">\n            <div>\n              <label className=\"block text-xs text-gray-600 mb-1\">処置名</label>\n              <div className=\"flex space-x-2\">\n                <input\n                  type=\"text\"\n                  value={newTreatment.name}\n                  onChange={(e) => setNewTreatment({ ...newTreatment, name: e.target.value })}\n                  className=\"flex-1 px-2 py-1 text-sm border rounded\"\n                  placeholder=\"処置名を入力\"\n                />\n                <Button\n                  size=\"sm\"\n                  variant=\"outline\"\n                  onClick={() => setShowPresets(!showPresets)}\n                >\n                  選択\n                </Button>\n              </div>\n              \n              {showPresets && (\n                <div className=\"mt-2 p-2 bg-white border rounded max-h-32 overflow-y-auto\">\n                  <div className=\"text-xs text-gray-600 mb-1\">処置を選択:</div>\n                  <div className=\"space-y-1\">\n                    {PRESET_TREATMENTS.map((preset) => (\n                      <button\n                        key={preset}\n                        onClick={() => handlePresetSelect(preset)}\n                        className=\"block w-full text-left text-sm px-2 py-1 hover:bg-gray-100 rounded\"\n                      >\n                        {preset}\n                      </button>\n                    ))}\n                  </div>\n                </div>\n              )}\n            </div>\n            \n            <div>\n              <label className=\"block text-xs text-gray-600 mb-1\">詳細・備考</label>\n              <textarea\n                value={newTreatment.details}\n                onChange={(e) => setNewTreatment({ ...newTreatment, details: e.target.value })}\n                className=\"w-full px-2 py-1 text-sm border rounded resize-none\"\n                rows={2}\n                placeholder=\"詳細や数値など\"\n              />\n            </div>\n          </div>\n          \n          <div className=\"flex justify-end space-x-2 mt-3\">\n            <Button\n              size=\"sm\"\n              variant=\"outline\"\n              onClick={() => {\n                setShowForm(false);\n                setShowPresets(false);\n                setNewTreatment({ name: '', details: '' });\n              }}\n            >\n              キャンセル\n            </Button>\n            <Button\n              size=\"sm\"\n              onClick={() => addTreatment(newTreatment.name, newTreatment.details)}\n            >\n              保存\n            </Button>\n          </div>\n        </div>\n      )}\n\n      <div className=\"space-y-2 max-h-60 overflow-y-auto\">\n        {treatments.length === 0 ? (\n          <p className=\"text-sm text-gray-500 text-center py-4\">\n            処置記録がありません\n          </p>\n        ) : (\n          treatments.map((treatment) => (\n            <div key={treatment.id} className=\"bg-gray-50 rounded p-3 text-sm\">\n              <div className=\"flex justify-between items-start mb-1\">\n                <div className=\"font-medium text-gray-900\">{treatment.name}</div>\n                <span className=\"text-xs text-gray-500\">\n                  {formatTime(treatment.timestamp)}\n                </span>\n              </div>\n              {treatment.details && (\n                <div className=\"text-gray-600 text-xs mb-1\">\n                  {treatment.details}\n                </div>\n              )}\n              <div className=\"text-xs text-gray-500\">\n                記録者: {treatment.recordedBy}\n              </div>\n            </div>\n          ))\n        )}\n      </div>\n    </div>\n  );\n};","import { useState, useEffect } from 'react';\n\ninterface GeolocationState {\n  location: {\n    latitude: number;\n    longitude: number;\n    accuracy?: number;\n  } | null;\n  error: string | null;\n  loading: boolean;\n}\n\ninterface UseGeolocationOptions {\n  enableHighAccuracy?: boolean;\n  timeout?: number;\n  maximumAge?: number;\n  watch?: boolean;\n}\n\nexport const useGeolocation = (options: UseGeolocationOptions = {}) => {\n  const [state, setState] = useState<GeolocationState>({\n    location: null,\n    error: null,\n    loading: true\n  });\n\n  const {\n    enableHighAccuracy = true,\n    timeout = 10000,\n    maximumAge = 60000,\n    watch = false\n  } = options;\n\n  useEffect(() => {\n    if (!navigator.geolocation) {\n      setState({\n        location: null,\n        error: 'Geolocation is not supported by this browser.',\n        loading: false\n      });\n      return;\n    }\n\n    const onSuccess = (position: GeolocationPosition) => {\n      setState({\n        location: {\n          latitude: position.coords.latitude,\n          longitude: position.coords.longitude,\n          accuracy: position.coords.accuracy\n        },\n        error: null,\n        loading: false\n      });\n    };\n\n    const onError = (error: GeolocationPositionError) => {\n      let errorMessage = 'Unknown error occurred.';\n      \n      switch (error.code) {\n        case error.PERMISSION_DENIED:\n          errorMessage = '位置情報へのアクセスが拒否されました。';\n          break;\n        case error.POSITION_UNAVAILABLE:\n          errorMessage = '位置情報を取得できませんでした。';\n          break;\n        case error.TIMEOUT:\n          errorMessage = '位置情報の取得がタイムアウトしました。';\n          break;\n      }\n\n      setState({\n        location: null,\n        error: errorMessage,\n        loading: false\n      });\n    };\n\n    const geoOptions = {\n      enableHighAccuracy,\n      timeout,\n      maximumAge\n    };\n\n    setState(prev => ({ ...prev, loading: true }));\n\n    let watchId: number | undefined;\n\n    if (watch) {\n      watchId = navigator.geolocation.watchPosition(onSuccess, onError, geoOptions);\n    } else {\n      navigator.geolocation.getCurrentPosition(onSuccess, onError, geoOptions);\n    }\n\n    return () => {\n      if (watchId !== undefined) {\n        navigator.geolocation.clearWatch(watchId);\n      }\n    };\n  }, [enableHighAccuracy, timeout, maximumAge, watch]);\n\n  const getCurrentPosition = () => {\n    if (!navigator.geolocation) {\n      setState(prev => ({\n        ...prev,\n        error: 'Geolocation is not supported by this browser.',\n        loading: false\n      }));\n      return;\n    }\n\n    setState(prev => ({ ...prev, loading: true, error: null }));\n\n    navigator.geolocation.getCurrentPosition(\n      (position) => {\n        setState({\n          location: {\n            latitude: position.coords.latitude,\n            longitude: position.coords.longitude,\n            accuracy: position.coords.accuracy\n          },\n          error: null,\n          loading: false\n        });\n      },\n      (error) => {\n        let errorMessage = 'Unknown error occurred.';\n        \n        switch (error.code) {\n          case error.PERMISSION_DENIED:\n            errorMessage = '位置情報へのアクセスが拒否されました。';\n            break;\n          case error.POSITION_UNAVAILABLE:\n            errorMessage = '位置情報を取得できませんでした。';\n            break;\n          case error.TIMEOUT:\n            errorMessage = '位置情報の取得がタイムアウトしました。';\n            break;\n        }\n\n        setState({\n          location: null,\n          error: errorMessage,\n          loading: false\n        });\n      },\n      {\n        enableHighAccuracy,\n        timeout,\n        maximumAge\n      }\n    );\n  };\n\n  return {\n    ...state,\n    getCurrentPosition\n  };\n};","import React, { useState, useEffect } from 'react';\nimport { Button } from '@/components/common';\nimport { useGeolocation } from '@/hooks/useGeolocation';\n\ninterface LocationTrackerProps {\n  className?: string;\n  onLocationUpdate?: (location: { latitude: number; longitude: number }) => void;\n}\n\nexport const LocationTracker: React.FC<LocationTrackerProps> = ({\n  className = '',\n  onLocationUpdate\n}) => {\n  const [isTracking, setIsTracking] = useState(false);\n  const { location, error, loading, getCurrentPosition } = useGeolocation({\n    watch: isTracking,\n    enableHighAccuracy: true,\n    timeout: 10000,\n    maximumAge: 30000\n  });\n\n  useEffect(() => {\n    if (location && onLocationUpdate) {\n      onLocationUpdate(location);\n    }\n  }, [location, onLocationUpdate]);\n\n  const toggleTracking = () => {\n    setIsTracking(!isTracking);\n  };\n\n  const refreshLocation = () => {\n    getCurrentPosition();\n  };\n\n  const formatCoordinate = (value: number) => {\n    return value.toFixed(6);\n  };\n\n  const formatTime = () => {\n    return new Date().toLocaleTimeString('ja-JP');\n  };\n\n  return (\n    <div className={`bg-white rounded-lg border p-4 ${className}`}>\n      <div className=\"flex justify-between items-start mb-4\">\n        <h4 className=\"text-sm font-medium text-gray-900\">現在地追跡</h4>\n        <div className=\"flex space-x-2\">\n          <Button\n            size=\"sm\"\n            variant=\"outline\"\n            onClick={refreshLocation}\n            disabled={loading}\n          >\n            更新\n          </Button>\n          <Button\n            size=\"sm\"\n            variant={isTracking ? \"danger\" : \"primary\"}\n            onClick={toggleTracking}\n          >\n            {isTracking ? '停止' : '開始'}\n          </Button>\n        </div>\n      </div>\n\n      {loading && (\n        <div className=\"text-sm text-gray-600 mb-2\">\n          位置情報を取得中...\n        </div>\n      )}\n\n      {error && (\n        <div className=\"text-sm text-red-600 mb-2\">\n          エラー: {error}\n        </div>\n      )}\n\n      {location && (\n        <div className=\"space-y-2\">\n          <div className=\"grid grid-cols-2 gap-4 text-sm\">\n            <div>\n              <span className=\"text-gray-600\">緯度:</span>\n              <div className=\"font-mono\">{formatCoordinate(location.latitude)}</div>\n            </div>\n            <div>\n              <span className=\"text-gray-600\">経度:</span>\n              <div className=\"font-mono\">{formatCoordinate(location.longitude)}</div>\n            </div>\n          </div>\n          \n          {location.accuracy && (\n            <div className=\"text-xs text-gray-500\">\n              精度: ±{Math.round(location.accuracy)}m\n            </div>\n          )}\n          \n          <div className=\"text-xs text-gray-500\">\n            最終更新: {formatTime()}\n          </div>\n          \n          {isTracking && (\n            <div className=\"flex items-center text-xs text-green-600\">\n              <div className=\"w-2 h-2 bg-green-600 rounded-full mr-2 animate-pulse\"></div>\n              追跡中\n            </div>\n          )}\n        </div>\n      )}\n\n      {!location && !loading && !error && (\n        <div className=\"text-sm text-gray-500 text-center py-4\">\n          位置情報を取得してください\n        </div>\n      )}\n    </div>\n  );\n};","import { GeoPoint } from 'firebase/firestore';\nimport { \n  BuildingInfo, \n  BuildingSearchOptions, \n  BuildingInfoResponse \n} from '@/types/buildingInfo';\nimport { config } from '@/config/environment';\n\nclass BuildingInfoService {\n  private mockData: BuildingInfo[] = [\n    {\n      id: 'building-1',\n      name: '東京駅',\n      type: 'station',\n      address: '東京都千代田区丸の内1丁目',\n      floors: 3,\n      basement: 4,\n      elevators: [\n        {\n          id: 'elv-1',\n          location: '丸の内中央口',\n          capacity: 20,\n          maxWeight: 1350,\n          floors: [-4, -3, -2, -1, 1, 2, 3],\n          isAccessible: true,\n          status: 'working'\n        },\n        {\n          id: 'elv-2',\n          location: '八重洲中央口',\n          capacity: 15,\n          maxWeight: 1000,\n          floors: [-2, -1, 1, 2],\n          isAccessible: true,\n          status: 'working'\n        }\n      ],\n      staircases: [\n        {\n          id: 'stair-1',\n          location: '丸の内北口階段',\n          type: 'normal',\n          floors: [-1, 1, 2],\n          width: 'wide'\n        },\n        {\n          id: 'stair-2',\n          location: '八重洲南口階段',\n          type: 'normal',\n          floors: [-1, 1],\n          width: 'standard'\n        }\n      ],\n      exits: [\n        {\n          id: 'exit-1',\n          name: '丸の内中央口',\n          type: 'main',\n          floor: 1,\n          direction: '西側',\n          isAccessible: true,\n          nearbyLandmarks: ['皇居', '丸ビル']\n        },\n        {\n          id: 'exit-2',\n          name: '八重洲中央口',\n          type: 'main',\n          floor: 1,\n          direction: '東側',\n          isAccessible: true,\n          nearbyLandmarks: ['大丸東京店', 'グランルーフ']\n        },\n        {\n          id: 'exit-3',\n          name: '丸の内北口',\n          type: 'main',\n          floor: 1,\n          direction: '北西',\n          isAccessible: true,\n          nearbyLandmarks: ['KITTE', '東京中央郵便局']\n        }\n      ],\n      accessibility: {\n        wheelchairAccessible: true,\n        elevatorToAllFloors: true,\n        accessibleParking: false,\n        accessibleRestrooms: true,\n        guidanceForVisuallyImpaired: true\n      },\n      emergencyContact: '03-3212-2345',\n      location: this.createMockGeoPoint(35.6812, 139.7671),\n      lastUpdated: new Date('2024-01-15')\n    },\n    {\n      id: 'building-2',\n      name: '新宿パークタワー',\n      type: 'office',\n      address: '東京都新宿区西新宿3丁目7-1',\n      floors: 52,\n      basement: 3,\n      elevators: [\n        {\n          id: 'elv-3',\n          location: '低層用エレベーター',\n          capacity: 20,\n          maxWeight: 1350,\n          floors: [-3, -2, -1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n          isAccessible: true,\n          status: 'working'\n        },\n        {\n          id: 'elv-4',\n          location: '高層用エレベーター',\n          capacity: 20,\n          maxWeight: 1350,\n          floors: [1, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52],\n          isAccessible: true,\n          status: 'working'\n        },\n        {\n          id: 'elv-5',\n          location: '非常用エレベーター',\n          capacity: 17,\n          maxWeight: 1150,\n          floors: [-3, -2, -1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52],\n          isAccessible: true,\n          status: 'working'\n        }\n      ],\n      staircases: [\n        {\n          id: 'stair-3',\n          location: '北側非常階段',\n          type: 'emergency',\n          floors: [-3, -2, -1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52],\n          width: 'standard'\n        },\n        {\n          id: 'stair-4',\n          location: '南側非常階段',\n          type: 'emergency',\n          floors: [-3, -2, -1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52],\n          width: 'standard'\n        }\n      ],\n      exits: [\n        {\n          id: 'exit-4',\n          name: 'メインエントランス',\n          type: 'main',\n          floor: 1,\n          direction: '南側',\n          isAccessible: true,\n          nearbyLandmarks: ['新宿中央公園', 'ハイアットリージェンシー東京']\n        },\n        {\n          id: 'exit-5',\n          name: '北側出口',\n          type: 'emergency',\n          floor: 1,\n          direction: '北側',\n          isAccessible: false\n        }\n      ],\n      accessibility: {\n        wheelchairAccessible: true,\n        elevatorToAllFloors: true,\n        accessibleParking: true,\n        accessibleRestrooms: true,\n        guidanceForVisuallyImpaired: false\n      },\n      emergencyContact: '03-5322-1234',\n      location: this.createMockGeoPoint(35.6879, 139.6917),\n      lastUpdated: new Date('2024-02-01')\n    },\n    {\n      id: 'building-3',\n      name: '渋谷スカイ',\n      type: 'shopping',\n      address: '東京都渋谷区渋谷2丁目24-12',\n      floors: 14,\n      basement: 2,\n      elevators: [\n        {\n          id: 'elv-6',\n          location: '中央エレベーター',\n          capacity: 24,\n          maxWeight: 1600,\n          floors: [-2, -1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],\n          isAccessible: true,\n          status: 'working'\n        }\n      ],\n      staircases: [\n        {\n          id: 'stair-5',\n          location: 'エスカレーター',\n          type: 'escalator',\n          floors: [-2, -1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],\n          width: 'wide'\n        }\n      ],\n      exits: [\n        {\n          id: 'exit-6',\n          name: 'JR渋谷駅直結',\n          type: 'main',\n          floor: 2,\n          direction: '東側',\n          isAccessible: true,\n          nearbyLandmarks: ['渋谷駅', 'ハチ公']\n        }\n      ],\n      accessibility: {\n        wheelchairAccessible: true,\n        elevatorToAllFloors: true,\n        accessibleParking: false,\n        accessibleRestrooms: true,\n        guidanceForVisuallyImpaired: true\n      },\n      location: this.createMockGeoPoint(35.6580, 139.7016),\n      lastUpdated: new Date('2024-01-20')\n    }\n  ];\n\n  private createMockGeoPoint(latitude: number, longitude: number): GeoPoint {\n    return {\n      latitude,\n      longitude,\n      isEqual: (other: GeoPoint) => \n        Math.abs(latitude - other.latitude) < 0.0001 && \n        Math.abs(longitude - other.longitude) < 0.0001\n    } as GeoPoint;\n  }\n\n  private calculateDistance(point1: GeoPoint, point2: GeoPoint): number {\n    const R = 6371000; // 地球の半径（メートル）\n    const lat1Rad = (point1.latitude * Math.PI) / 180;\n    const lat2Rad = (point2.latitude * Math.PI) / 180;\n    const deltaLatRad = ((point2.latitude - point1.latitude) * Math.PI) / 180;\n    const deltaLonRad = ((point2.longitude - point1.longitude) * Math.PI) / 180;\n\n    const a = Math.sin(deltaLatRad / 2) * Math.sin(deltaLatRad / 2) +\n              Math.cos(lat1Rad) * Math.cos(lat2Rad) *\n              Math.sin(deltaLonRad / 2) * Math.sin(deltaLonRad / 2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n\n    return R * c;\n  }\n\n  async getBuildingInfoByLocation(\n    location: GeoPoint, \n    options: BuildingSearchOptions = {}\n  ): Promise<BuildingInfoResponse> {\n    console.log('Building service: Getting building info for location', location);\n    \n    try {\n      if (config.demoMode) {\n        return this.getMockBuildingInfo(location, options);\n      }\n\n      // 本番環境では外部APIを呼び出し\n      // TODO: Google Places API等の実装\n      return {\n        building: null,\n        confidence: 0\n      };\n    } catch (error) {\n      console.error('Failed to get building info:', error);\n      return {\n        building: null,\n        confidence: 0\n      };\n    }\n  }\n\n  private getMockBuildingInfo(\n    location: GeoPoint, \n    options: BuildingSearchOptions\n  ): BuildingInfoResponse {\n    const radius = options.radius || 100; // デフォルト100メートル\n    \n    let closestBuilding: BuildingInfo | null = null;\n    let minDistance = Infinity;\n\n    for (const building of this.mockData) {\n      const distance = this.calculateDistance(location, building.location);\n      \n      if (distance <= radius && distance < minDistance) {\n        // 建物種別フィルターのチェック\n        if (options.buildingTypes && !options.buildingTypes.includes(building.type)) {\n          continue;\n        }\n        \n        // バリアフリー要件のチェック\n        if (options.requireAccessibility && !building.accessibility.wheelchairAccessible) {\n          continue;\n        }\n        \n        closestBuilding = building;\n        minDistance = distance;\n      }\n    }\n\n    return {\n      building: closestBuilding,\n      distance: closestBuilding ? minDistance : undefined,\n      confidence: closestBuilding ? Math.max(0.1, 1 - (minDistance / radius)) : 0\n    };\n  }\n\n  async searchBuildings(query: string): Promise<BuildingInfo[]> {\n    console.log('Building service: Searching buildings with query', query);\n    \n    try {\n      if (config.demoMode) {\n        return this.mockData.filter(building => \n          building.name.toLowerCase().includes(query.toLowerCase()) ||\n          building.address.toLowerCase().includes(query.toLowerCase())\n        );\n      }\n\n      // 本番環境では外部APIを呼び出し\n      return [];\n    } catch (error) {\n      console.error('Failed to search buildings:', error);\n      return [];\n    }\n  }\n\n  async updateBuildingInfo(buildingId: string, info: Partial<BuildingInfo>): Promise<void> {\n    console.log('Building service: Updating building info', buildingId, info);\n    \n    try {\n      if (config.demoMode) {\n        const index = this.mockData.findIndex(building => building.id === buildingId);\n        if (index !== -1) {\n          this.mockData[index] = { ...this.mockData[index], ...info };\n        }\n        return;\n      }\n\n      // 本番環境では外部APIを呼び出し\n      // TODO: Firebase/API実装\n    } catch (error) {\n      console.error('Failed to update building info:', error);\n      throw error;\n    }\n  }\n}\n\nexport const buildingInfoService = new BuildingInfoService();","import React from 'react';\nimport { ElevatorInfo } from '@/types/buildingInfo';\n\ninterface ElevatorInfoCardProps {\n  elevator: ElevatorInfo;\n}\n\nexport const ElevatorInfoCard: React.FC<ElevatorInfoCardProps> = ({ elevator }) => {\n  const getStatusColor = (status?: string) => {\n    switch (status) {\n      case 'working':\n        return 'text-green-600 bg-green-50';\n      case 'maintenance':\n        return 'text-yellow-600 bg-yellow-50';\n      case 'unknown':\n      default:\n        return 'text-gray-600 bg-gray-50';\n    }\n  };\n\n  const getStatusText = (status?: string) => {\n    switch (status) {\n      case 'working':\n        return '稼働中';\n      case 'maintenance':\n        return 'メンテナンス中';\n      case 'unknown':\n      default:\n        return '状況不明';\n    }\n  };\n\n  const formatFloors = (floors: number[]): string => {\n    const sorted = [...floors].sort((a, b) => a - b);\n    const groups: string[] = [];\n    let start = sorted[0];\n    let end = sorted[0];\n\n    for (let i = 1; i < sorted.length; i++) {\n      if (sorted[i] === end + 1) {\n        end = sorted[i];\n      } else {\n        if (start === end) {\n          groups.push(start === 0 ? 'G' : start < 0 ? `B${Math.abs(start)}` : `${start}`);\n        } else {\n          const startStr = start === 0 ? 'G' : start < 0 ? `B${Math.abs(start)}` : `${start}`;\n          const endStr = end === 0 ? 'G' : end < 0 ? `B${Math.abs(end)}` : `${end}`;\n          groups.push(`${startStr}-${endStr}`);\n        }\n        start = sorted[i];\n        end = sorted[i];\n      }\n    }\n\n    if (start === end) {\n      groups.push(start === 0 ? 'G' : start < 0 ? `B${Math.abs(start)}` : `${start}`);\n    } else {\n      const startStr = start === 0 ? 'G' : start < 0 ? `B${Math.abs(start)}` : `${start}`;\n      const endStr = end === 0 ? 'G' : end < 0 ? `B${Math.abs(end)}` : `${end}`;\n      groups.push(`${startStr}-${endStr}`);\n    }\n\n    return groups.join(', ') + 'F';\n  };\n\n  return (\n    <div className=\"bg-gray-50 rounded p-3 text-xs\">\n      <div className=\"flex items-start justify-between mb-2\">\n        <div className=\"flex-1\">\n          <div className=\"font-medium text-gray-900\">{elevator.location}</div>\n          <div className=\"text-gray-600 mt-1\">\n            定員: {elevator.capacity}人 | 最大: {elevator.maxWeight}kg\n          </div>\n        </div>\n        \n        <div className=\"flex items-center space-x-2\">\n          {elevator.isAccessible && (\n            <div className=\"flex items-center text-blue-600\">\n              <svg className=\"h-3 w-3 mr-1\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\" clipRule=\"evenodd\" />\n              </svg>\n              <span>車椅子対応</span>\n            </div>\n          )}\n          \n          {elevator.status && (\n            <span className={`px-2 py-1 rounded text-xs font-medium ${getStatusColor(elevator.status)}`}>\n              {getStatusText(elevator.status)}\n            </span>\n          )}\n        </div>\n      </div>\n      \n      <div className=\"text-gray-600\">\n        <span className=\"font-medium\">停止階:</span> {formatFloors(elevator.floors)}\n      </div>\n    </div>\n  );\n};","import React from 'react';\nimport { StaircaseInfo } from '@/types/buildingInfo';\n\ninterface StaircaseInfoCardProps {\n  staircase: StaircaseInfo;\n}\n\nexport const StaircaseInfoCard: React.FC<StaircaseInfoCardProps> = ({ staircase }) => {\n  const getTypeIcon = (type: string) => {\n    switch (type) {\n      case 'escalator':\n        return (\n          <svg className=\"h-4 w-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M13 7l5 5-5 5M6 12h12\" />\n          </svg>\n        );\n      case 'emergency':\n        return (\n          <svg className=\"h-4 w-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n            <path fillRule=\"evenodd\" d=\"M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z\" clipRule=\"evenodd\" />\n          </svg>\n        );\n      default:\n        return (\n          <svg className=\"h-4 w-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M5 10l7-7m0 0l7 7m-7-7v18\" />\n          </svg>\n        );\n    }\n  };\n\n  const getTypeText = (type: string) => {\n    switch (type) {\n      case 'escalator':\n        return 'エスカレーター';\n      case 'emergency':\n        return '非常階段';\n      default:\n        return '一般階段';\n    }\n  };\n\n  const getTypeColor = (type: string) => {\n    switch (type) {\n      case 'escalator':\n        return 'text-blue-600';\n      case 'emergency':\n        return 'text-red-600';\n      default:\n        return 'text-gray-600';\n    }\n  };\n\n  const getWidthText = (width: string) => {\n    switch (width) {\n      case 'narrow':\n        return '狭い';\n      case 'wide':\n        return '広い';\n      default:\n        return '標準';\n    }\n  };\n\n  const getWidthColor = (width: string) => {\n    switch (width) {\n      case 'narrow':\n        return 'text-red-600';\n      case 'wide':\n        return 'text-green-600';\n      default:\n        return 'text-gray-600';\n    }\n  };\n\n  const formatFloors = (floors: number[]): string => {\n    const sorted = [...floors].sort((a, b) => a - b);\n    const groups: string[] = [];\n    let start = sorted[0];\n    let end = sorted[0];\n\n    for (let i = 1; i < sorted.length; i++) {\n      if (sorted[i] === end + 1) {\n        end = sorted[i];\n      } else {\n        if (start === end) {\n          groups.push(start === 0 ? 'G' : start < 0 ? `B${Math.abs(start)}` : `${start}`);\n        } else {\n          const startStr = start === 0 ? 'G' : start < 0 ? `B${Math.abs(start)}` : `${start}`;\n          const endStr = end === 0 ? 'G' : end < 0 ? `B${Math.abs(end)}` : `${end}`;\n          groups.push(`${startStr}-${endStr}`);\n        }\n        start = sorted[i];\n        end = sorted[i];\n      }\n    }\n\n    if (start === end) {\n      groups.push(start === 0 ? 'G' : start < 0 ? `B${Math.abs(start)}` : `${start}`);\n    } else {\n      const startStr = start === 0 ? 'G' : start < 0 ? `B${Math.abs(start)}` : `${start}`;\n      const endStr = end === 0 ? 'G' : end < 0 ? `B${Math.abs(end)}` : `${end}`;\n      groups.push(`${startStr}-${endStr}`);\n    }\n\n    return groups.join(', ') + 'F';\n  };\n\n  return (\n    <div className=\"bg-gray-50 rounded p-3 text-xs\">\n      <div className=\"flex items-start justify-between mb-2\">\n        <div className=\"flex-1\">\n          <div className=\"font-medium text-gray-900\">{staircase.location}</div>\n          <div className=\"text-gray-600 mt-1\">\n            接続階: {formatFloors(staircase.floors)}\n          </div>\n        </div>\n        \n        <div className=\"flex items-center space-x-3\">\n          <div className={`flex items-center ${getTypeColor(staircase.type)}`}>\n            {getTypeIcon(staircase.type)}\n            <span className=\"ml-1\">{getTypeText(staircase.type)}</span>\n          </div>\n          \n          <div className={`${getWidthColor(staircase.width)}`}>\n            幅: {getWidthText(staircase.width)}\n          </div>\n        </div>\n      </div>\n      \n      {staircase.type === 'emergency' && (\n        <div className=\"mt-2 p-2 bg-red-50 rounded text-red-700\">\n          <div className=\"flex items-center text-xs\">\n            <svg className=\"h-3 w-3 mr-1\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n              <path fillRule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z\" clipRule=\"evenodd\" />\n            </svg>\n            緊急時専用\n          </div>\n        </div>\n      )}\n      \n      {staircase.type === 'escalator' && (\n        <div className=\"mt-2 p-2 bg-blue-50 rounded text-blue-700\">\n          <div className=\"flex items-center text-xs\">\n            <svg className=\"h-3 w-3 mr-1\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n              <path fillRule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z\" clipRule=\"evenodd\" />\n            </svg>\n            ストレッチャー移送時は利用不可\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};","import React from 'react';\nimport { ExitInfo } from '@/types/buildingInfo';\n\ninterface ExitInfoCardProps {\n  exit: ExitInfo;\n}\n\nexport const ExitInfoCard: React.FC<ExitInfoCardProps> = ({ exit }) => {\n  const getTypeIcon = (type: string) => {\n    switch (type) {\n      case 'main':\n        return (\n          <svg className=\"h-4 w-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1\" />\n          </svg>\n        );\n      case 'emergency':\n        return (\n          <svg className=\"h-4 w-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n            <path fillRule=\"evenodd\" d=\"M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z\" clipRule=\"evenodd\" />\n          </svg>\n        );\n      case 'service':\n        return (\n          <svg className=\"h-4 w-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z\" />\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\" />\n          </svg>\n        );\n      default:\n        return (\n          <svg className=\"h-4 w-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M17 16l4-4m0 0l-4-4m4 4H7\" />\n          </svg>\n        );\n    }\n  };\n\n  const getTypeText = (type: string) => {\n    switch (type) {\n      case 'main':\n        return 'メイン出入口';\n      case 'emergency':\n        return '非常口';\n      case 'service':\n        return 'サービス出入口';\n      default:\n        return '出入口';\n    }\n  };\n\n  const getTypeColor = (type: string) => {\n    switch (type) {\n      case 'main':\n        return 'text-blue-600 bg-blue-50';\n      case 'emergency':\n        return 'text-red-600 bg-red-50';\n      case 'service':\n        return 'text-gray-600 bg-gray-50';\n      default:\n        return 'text-gray-600 bg-gray-50';\n    }\n  };\n\n  const formatFloor = (floor: number): string => {\n    if (floor === 0) return 'G階';\n    if (floor < 0) return `B${Math.abs(floor)}階`;\n    return `${floor}階`;\n  };\n\n  return (\n    <div className=\"bg-gray-50 rounded p-3 text-xs\">\n      <div className=\"flex items-start justify-between mb-2\">\n        <div className=\"flex-1\">\n          <div className=\"flex items-center space-x-2 mb-1\">\n            <div className=\"font-medium text-gray-900\">{exit.name}</div>\n            {exit.isAccessible && (\n              <div className=\"flex items-center text-blue-600\">\n                <svg className=\"h-3 w-3 mr-1\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                  <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\" clipRule=\"evenodd\" />\n                </svg>\n                <span>バリアフリー</span>\n              </div>\n            )}\n          </div>\n          \n          <div className=\"text-gray-600\">\n            {formatFloor(exit.floor)} | {exit.direction}\n          </div>\n        </div>\n        \n        <div className={`flex items-center px-2 py-1 rounded text-xs font-medium ${getTypeColor(exit.type)}`}>\n          {getTypeIcon(exit.type)}\n          <span className=\"ml-1\">{getTypeText(exit.type)}</span>\n        </div>\n      </div>\n      \n      {exit.nearbyLandmarks && exit.nearbyLandmarks.length > 0 && (\n        <div className=\"mt-2 p-2 bg-green-50 rounded\">\n          <div className=\"text-green-700\">\n            <span className=\"font-medium\">近くの目印:</span> {exit.nearbyLandmarks.join(', ')}\n          </div>\n        </div>\n      )}\n      \n      {exit.type === 'emergency' && (\n        <div className=\"mt-2 p-2 bg-red-50 rounded text-red-700\">\n          <div className=\"flex items-center text-xs\">\n            <svg className=\"h-3 w-3 mr-1\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n              <path fillRule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z\" clipRule=\"evenodd\" />\n            </svg>\n            緊急時専用出入口\n          </div>\n        </div>\n      )}\n      \n      {exit.type === 'main' && (\n        <div className=\"mt-2 p-2 bg-blue-50 rounded text-blue-700\">\n          <div className=\"flex items-center text-xs\">\n            <svg className=\"h-3 w-3 mr-1\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n              <path fillRule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z\" clipRule=\"evenodd\" />\n            </svg>\n            患者搬送推奨ルート\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};","import React from 'react';\nimport { AccessibilityInfo } from '@/types/buildingInfo';\n\ninterface AccessibilityBadgeProps {\n  accessibility: AccessibilityInfo;\n  className?: string;\n}\n\nexport const AccessibilityBadge: React.FC<AccessibilityBadgeProps> = ({ \n  accessibility, \n  className = '' \n}) => {\n  const getAccessibilityScore = (): number => {\n    let score = 0;\n    if (accessibility.wheelchairAccessible) score++;\n    if (accessibility.elevatorToAllFloors) score++;\n    if (accessibility.accessibleParking) score++;\n    if (accessibility.accessibleRestrooms) score++;\n    if (accessibility.guidanceForVisuallyImpaired) score++;\n    return score;\n  };\n\n  const score = getAccessibilityScore();\n  const maxScore = 5;\n\n  const getBadgeColor = (): string => {\n    const percentage = score / maxScore;\n    if (percentage >= 0.8) return 'bg-green-100 text-green-800 border-green-200';\n    if (percentage >= 0.6) return 'bg-yellow-100 text-yellow-800 border-yellow-200';\n    if (percentage >= 0.4) return 'bg-orange-100 text-orange-800 border-orange-200';\n    return 'bg-red-100 text-red-800 border-red-200';\n  };\n\n  const getBadgeText = (): string => {\n    const percentage = score / maxScore;\n    if (percentage >= 0.8) return 'バリアフリー対応';\n    if (percentage >= 0.6) return '一部バリアフリー';\n    if (percentage >= 0.4) return '限定的対応';\n    return '要注意';\n  };\n\n  const getIcon = (): JSX.Element => {\n    if (accessibility.wheelchairAccessible) {\n      return (\n        <svg className=\"h-3 w-3\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n          <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\" clipRule=\"evenodd\" />\n        </svg>\n      );\n    }\n    return (\n      <svg className=\"h-3 w-3\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n        <path fillRule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z\" clipRule=\"evenodd\" />\n      </svg>\n    );\n  };\n\n  return (\n    <div className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium border ${getBadgeColor()} ${className}`}>\n      {getIcon()}\n      <span className=\"ml-1\">{getBadgeText()}</span>\n      <span className=\"ml-1 opacity-75\">({score}/{maxScore})</span>\n    </div>\n  );\n};","import React, { useState, useEffect } from 'react';\nimport { GeoPoint } from 'firebase/firestore';\nimport { buildingInfoService } from '@/services/buildingInfoService';\nimport { BuildingInfoResponse } from '@/types/buildingInfo';\nimport { LoadingSpinner } from '@/components/common';\nimport { ElevatorInfoCard } from './ElevatorInfoCard';\nimport { StaircaseInfoCard } from './StaircaseInfoCard';\nimport { ExitInfoCard } from './ExitInfoCard';\nimport { AccessibilityBadge } from './AccessibilityBadge';\n\ninterface BuildingInfoComponentProps {\n  location: GeoPoint;\n  className?: string;\n}\n\nexport const BuildingInfoComponent: React.FC<BuildingInfoComponentProps> = ({\n  location,\n  className = ''\n}) => {\n  const [buildingInfo, setBuildingInfo] = useState<BuildingInfoResponse | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [isExpanded, setIsExpanded] = useState(false);\n\n  useEffect(() => {\n    loadBuildingInfo();\n  }, [location]);\n\n  const loadBuildingInfo = async () => {\n    if (!location) return;\n\n    setLoading(true);\n    setError(null);\n\n    try {\n      const response = await buildingInfoService.getBuildingInfoByLocation(location, {\n        radius: 200 // 200メートル以内で検索\n      });\n      \n      setBuildingInfo(response);\n    } catch (err) {\n      console.error('Failed to load building info:', err);\n      setError('建物情報の取得に失敗しました');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const formatDistance = (distance?: number): string => {\n    if (!distance) return '';\n    if (distance < 1000) {\n      return `${Math.round(distance)}m`;\n    }\n    return `${(distance / 1000).toFixed(1)}km`;\n  };\n\n  const getConfidenceColor = (confidence: number): string => {\n    if (confidence >= 0.8) return 'text-green-600';\n    if (confidence >= 0.5) return 'text-yellow-600';\n    return 'text-red-600';\n  };\n\n  if (loading) {\n    return (\n      <div className={`bg-white rounded-lg border p-4 ${className}`}>\n        <div className=\"flex items-center justify-center py-4\">\n          <LoadingSpinner size=\"sm\" />\n          <span className=\"ml-2 text-sm text-gray-600\">建物情報を取得中...</span>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className={`bg-white rounded-lg border p-4 ${className}`}>\n        <div className=\"flex items-center justify-between mb-2\">\n          <h4 className=\"text-sm font-medium text-gray-900\">建物情報</h4>\n        </div>\n        <div className=\"text-sm text-red-600\">{error}</div>\n      </div>\n    );\n  }\n\n  if (!buildingInfo?.building) {\n    return (\n      <div className={`bg-white rounded-lg border p-4 ${className}`}>\n        <div className=\"flex items-center justify-between mb-2\">\n          <h4 className=\"text-sm font-medium text-gray-900\">建物情報</h4>\n        </div>\n        <div className=\"text-sm text-gray-500\">\n          現場周辺に建物情報が見つかりませんでした\n        </div>\n      </div>\n    );\n  }\n\n  const building = buildingInfo.building;\n\n  return (\n    <div className={`bg-white rounded-lg border p-4 border-red-500 ${className}`} style={{backgroundColor: '#fff2f2'}}>\n      <div className=\"flex items-center justify-between mb-4\">\n        <div className=\"flex-1\">\n          <div className=\"flex items-center space-x-2\">\n            <h4 className=\"text-sm font-medium text-gray-900\">{building.name}</h4>\n            <AccessibilityBadge accessibility={building.accessibility} />\n          </div>\n          <div className=\"text-xs text-gray-500 mt-1\">\n            {building.address}\n          </div>\n          {buildingInfo.distance && (\n            <div className=\"text-xs text-gray-500\">\n              現場から{formatDistance(buildingInfo.distance)} \n              <span className={`ml-1 ${getConfidenceColor(buildingInfo.confidence)}`}>\n                (信頼度: {Math.round(buildingInfo.confidence * 100)}%)\n              </span>\n            </div>\n          )}\n        </div>\n        <button\n          onClick={() => setIsExpanded(!isExpanded)}\n          className=\"p-1 text-gray-400 hover:text-gray-600 transition-colors\"\n        >\n          <svg \n            className={`h-4 w-4 transition-transform ${isExpanded ? 'rotate-180' : ''}`}\n            fill=\"none\" \n            stroke=\"currentColor\" \n            viewBox=\"0 0 24 24\"\n          >\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M19 9l-7 7-7-7\" />\n          </svg>\n        </button>\n      </div>\n\n      {/* 基本情報 */}\n      <div className=\"grid grid-cols-2 gap-4 text-xs mb-4\">\n        <div>\n          <span className=\"text-gray-500\">建物種別:</span>\n          <div className=\"font-medium\">\n            {building.type === 'office' && 'オフィスビル'}\n            {building.type === 'hospital' && '病院'}\n            {building.type === 'station' && '駅'}\n            {building.type === 'shopping' && '商業施設'}\n            {building.type === 'residential' && '住宅'}\n            {building.type === 'school' && '学校'}\n            {building.type === 'other' && 'その他'}\n          </div>\n        </div>\n        <div>\n          <span className=\"text-gray-500\">階層:</span>\n          <div className=\"font-medium\">\n            {building.basement ? `B${building.basement}F-` : ''}{building.floors}F\n          </div>\n        </div>\n      </div>\n\n      {/* 緊急時連絡先 */}\n      {building.emergencyContact && (\n        <div className=\"mb-4 p-2 bg-red-50 rounded text-xs\">\n          <span className=\"text-red-600 font-medium\">緊急時連絡先:</span>\n          <div className=\"text-red-800 font-mono\">{building.emergencyContact}</div>\n        </div>\n      )}\n\n      {/* 詳細情報（展開時のみ） */}\n      {isExpanded && (\n        <div className=\"space-y-4 border-t pt-4\">\n          {/* エレベーター情報 */}\n          {building.elevators.length > 0 && (\n            <div>\n              <h5 className=\"text-sm font-medium text-gray-800 mb-2\">エレベーター</h5>\n              <div className=\"space-y-2\">\n                {building.elevators.map((elevator) => (\n                  <ElevatorInfoCard key={elevator.id} elevator={elevator} />\n                ))}\n              </div>\n            </div>\n          )}\n\n          {/* 階段情報 */}\n          {building.staircases.length > 0 && (\n            <div>\n              <h5 className=\"text-sm font-medium text-gray-800 mb-2\">階段・エスカレーター</h5>\n              <div className=\"space-y-2\">\n                {building.staircases.map((staircase) => (\n                  <StaircaseInfoCard key={staircase.id} staircase={staircase} />\n                ))}\n              </div>\n            </div>\n          )}\n\n          {/* 出口情報 */}\n          {building.exits.length > 0 && (\n            <div>\n              <h5 className=\"text-sm font-medium text-gray-800 mb-2\">出入口</h5>\n              <div className=\"space-y-2\">\n                {building.exits.map((exit) => (\n                  <ExitInfoCard key={exit.id} exit={exit} />\n                ))}\n              </div>\n            </div>\n          )}\n\n          {/* 最終更新日 */}\n          {building.lastUpdated && (\n            <div className=\"text-xs text-gray-400 pt-2 border-t\">\n              最終更新: {building.lastUpdated.toLocaleDateString('ja-JP')}\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};","import React, { useEffect, useRef, useState } from 'react';\nimport { useParams, Navigate, useNavigate } from 'react-router-dom';\nimport { useCaseStore, useAuthStore } from '@/stores';\nimport { LoadingSpinner, Button } from '@/components/common';\nimport { CASE_STATUS } from '@/constants';\nimport { MapComponent, VitalSignsComponent, ChatComponent, TreatmentComponent, LocationTracker, BuildingInfoComponent } from '@/components/features';\nimport { RouteOptimizationComponent } from '@/components/features/RouteOptimization';\n\nexport const CaseDetailPage: React.FC = () => {\n  const { caseId } = useParams<{ caseId: string }>();\n  const navigate = useNavigate();\n  const { currentCase, loading, error, loadCurrentCase, startObservingCase, stopObservingCase, updateStatus } = useCaseStore();\n  const { userInfo } = useAuthStore();\n  const isMountedRef = useRef(true);\n  const [activeTab, setActiveTab] = useState<'vitals' | 'treatments'>('vitals');\n  const [currentLocation, setCurrentLocation] = useState<{ latitude: number; longitude: number } | null>(null);\n  const [selectedRoute, setSelectedRoute] = useState<any>(null);\n  const [selectedHospital, setSelectedHospital] = useState<any>(null);\n  \n  // ステータス更新処理\n  const handleStatusUpdate = async (newStatus: string) => {\n    if (!caseId) return;\n    \n    try {\n      await updateStatus(caseId, newStatus as any);\n    } catch (error) {\n      console.error('Status update failed:', error);\n      alert('ステータス更新に失敗しました');\n    }\n  };\n  \n  // 次のステータスを取得\n  const getNextStatus = (currentStatus: string) => {\n    switch (currentStatus) {\n      case CASE_STATUS.DISPATCHED:\n        return { status: CASE_STATUS.ON_SCENE, label: '現場到着' };\n      case CASE_STATUS.ON_SCENE:\n        return { status: CASE_STATUS.TRANSPORTING, label: '搬送開始' };\n      case CASE_STATUS.TRANSPORTING:\n        return { status: CASE_STATUS.COMPLETED, label: '搬送完了' };\n      default:\n        return null;\n    }\n  };\n  \n  // 現在地更新ハンドラー\n  const handleLocationUpdate = (location: { latitude: number; longitude: number }) => {\n    setCurrentLocation(location);\n  };\n  \n  useEffect(() => {\n    isMountedRef.current = true;\n    \n    if (!caseId) return;\n    \n    const loadData = async () => {\n      try {\n        if (isMountedRef.current) {\n          await loadCurrentCase(caseId);\n          if (isMountedRef.current) {\n            startObservingCase(caseId);\n          }\n        }\n      } catch (error) {\n        console.error('Failed to load case:', error);\n      }\n    };\n    \n    loadData();\n    \n    return () => {\n      isMountedRef.current = false;\n      try {\n        stopObservingCase();\n      } catch (error) {\n        console.error('Cleanup error:', error);\n      }\n    };\n  }, [caseId]);\n  \n  // コンポーネントのアンマウント時のクリーンアップ\n  useEffect(() => {\n    return () => {\n      isMountedRef.current = false;\n    };\n  }, []);\n  \n  if (!caseId) {\n    return <Navigate to=\"/cases\" replace />;\n  }\n  \n  if (loading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <LoadingSpinner size=\"lg\" />\n      </div>\n    );\n  }\n  \n  if (error) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold text-gray-900 mb-4\">エラーが発生しました</h1>\n          <p className=\"text-gray-600 mb-6\">{error}</p>\n          <button \n            onClick={() => {\n              isMountedRef.current = false;\n              try {\n                stopObservingCase();\n              } catch (error) {\n                console.error('Stop observing error:', error);\n              }\n              \n              // ナビゲーションを少し遅延\n              setTimeout(() => {\n                try {\n                  navigate('/cases');\n                } catch (error) {\n                  console.error('Navigation error:', error);\n                  window.location.href = '/cases';\n                }\n              }, 100);\n            }}\n            className=\"bg-medical-primary text-white px-4 py-2 rounded-lg hover:bg-blue-700\"\n          >\n            事案一覧に戻る\n          </button>\n        </div>\n      </div>\n    );\n  }\n  \n  if (!currentCase) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold text-gray-900 mb-4\">事案が見つかりません</h1>\n          <p className=\"text-gray-600 mb-6\">指定された事案は存在しないか、アクセス権限がありません。</p>\n          <button \n            onClick={() => {\n              isMountedRef.current = false;\n              try {\n                stopObservingCase();\n              } catch (error) {\n                console.error('Stop observing error:', error);\n              }\n              \n              // ナビゲーションを少し遅延\n              setTimeout(() => {\n                try {\n                  navigate('/cases');\n                } catch (error) {\n                  console.error('Navigation error:', error);\n                  window.location.href = '/cases';\n                }\n              }, 100);\n            }}\n            className=\"bg-medical-primary text-white px-4 py-2 rounded-lg hover:bg-blue-700\"\n          >\n            事案一覧に戻る\n          </button>\n        </div>\n      </div>\n    );\n  }\n  \n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* ヘッダー */}\n      <header className=\"bg-white shadow-sm border-b border-gray-200\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex items-center justify-between h-16\">\n            <div className=\"flex items-center space-x-4\">\n              <button\n                onClick={() => {\n                  isMountedRef.current = false;\n                  try {\n                    stopObservingCase();\n                  } catch (error) {\n                    console.error('Stop observing error:', error);\n                  }\n                  \n                  // ナビゲーションを少し遅延\n                  setTimeout(() => {\n                    try {\n                      navigate('/cases');\n                    } catch (error) {\n                      console.error('Navigation error:', error);\n                      window.location.href = '/cases';\n                    }\n                  }, 100);\n                }}\n                className=\"p-2 text-gray-400 hover:text-gray-600 transition-colors\"\n              >\n                <svg className=\"h-5 w-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M15 19l-7-7 7-7\" />\n                </svg>\n              </button>\n              \n              <div>\n                <h1 className=\"text-xl font-semibold text-gray-900\">{currentCase.caseName}</h1>\n                <p className=\"text-sm text-gray-500\">\n                  ステータス: {currentCase.status} | 担当: {currentCase.teamId}\n                </p>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center space-x-4\">\n              {(() => {\n                const nextStatus = getNextStatus(currentCase.status);\n                return nextStatus ? (\n                  <Button\n                    size=\"sm\"\n                    onClick={() => handleStatusUpdate(nextStatus.status)}\n                  >\n                    {nextStatus.label}\n                  </Button>\n                ) : null;\n              })()}\n              \n              <Button\n                size=\"sm\"\n                variant=\"outline\"\n                onClick={() => navigate(`/cases/${caseId}/registry`)}\n              >\n                レジストリ入力\n              </Button>\n              \n              <div className=\"text-sm text-gray-700\">\n                <span className=\"font-medium\">{userInfo?.name}</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* メインコンテンツ */}\n      <main className=\"max-w-7xl mx-auto py-6 sm:px-6 lg:px-8\">\n        <div className=\"px-4 py-6 sm:px-0\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {/* マップエリア */}\n            <div className=\"bg-white rounded-lg shadow p-6\">\n              <h3 className=\"text-lg font-medium text-gray-900 mb-4\">位置情報</h3>\n              <div className=\"h-64\">\n                <MapComponent\n                  sceneLocation={currentCase.sceneLocation}\n                  hospitalLocation={currentCase.hospitalLocation}\n                  currentLocation={currentLocation || undefined}\n                  selectedRoute={selectedRoute}\n                  selectedHospital={selectedHospital}\n                  showFullscreenButton={true}\n                />\n              </div>\n              <div className=\"mt-3 text-sm text-gray-600\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"flex items-center\">\n                      <div className=\"w-3 h-3 bg-red-600 rounded-full mr-1\"></div>\n                      <span>現場</span>\n                    </div>\n                    <div className=\"flex items-center\">\n                      <div className=\"w-3 h-3 bg-blue-600 rounded-full mr-1\"></div>\n                      <span>搬送先病院</span>\n                    </div>\n                    {currentLocation && (\n                      <div className=\"flex items-center\">\n                        <div className=\"w-3 h-3 bg-green-600 rounded-full mr-1\"></div>\n                        <span>現在地</span>\n                      </div>\n                    )}\n                    {selectedRoute && (\n                      <div className=\"flex items-center\">\n                        <div className=\"w-4 h-1 bg-blue-500 rounded mr-1\"></div>\n                        <span>ルート</span>\n                      </div>\n                    )}\n                  </div>\n                  <div className=\"text-xs text-gray-500\">\n                    📱 右上ボタンで全画面表示\n                  </div>\n                </div>\n              </div>\n              \n              {/* 位置追跡 */}\n              <div className=\"mt-4\">\n                <LocationTracker onLocationUpdate={handleLocationUpdate} />\n              </div>\n              \n              {/* 建物情報 */}\n              <div className=\"mt-4\">\n                <BuildingInfoComponent location={currentCase.sceneLocation} />\n              </div>\n              \n              {/* ルート最適化 */}\n              <div className=\"mt-6 border-t pt-4\">\n                <h4 className=\"text-md font-medium text-gray-900 mb-4\">🚗 ルート最適化</h4>\n                <RouteOptimizationComponent\n                  currentLocation={currentLocation || undefined}\n                  sceneLocation={{\n                    latitude: currentCase.sceneLocation.latitude,\n                    longitude: currentCase.sceneLocation.longitude\n                  }}\n                  onRouteSelected={(route) => {\n                    console.log('Route selected:', route);\n                    console.log('Route coordinates:', route?.coordinates);\n                    console.log('Route coordinates length:', route?.coordinates?.length);\n                    setSelectedRoute(route);\n                  }}\n                  onNavigationStart={(route) => {\n                    console.log('Navigation started:', route);\n                    alert('ナビゲーションを開始しました');\n                  }}\n                  onHospitalSelected={(hospital) => {\n                    console.log('Hospital selected:', hospital);\n                    setSelectedHospital(hospital);\n                  }}\n                />\n              </div>\n            </div>\n            \n            {/* 患者情報エリア */}\n            <div className=\"bg-white rounded-lg shadow p-6\">\n              <h3 className=\"text-lg font-medium text-gray-900 mb-4\">患者情報</h3>\n              \n              {currentCase.patientInfo.name && (\n                <div className=\"mb-3\">\n                  <span className=\"text-sm font-medium text-gray-500\">氏名: </span>\n                  <span className=\"text-sm text-gray-900\">{currentCase.patientInfo.name}</span>\n                </div>\n              )}\n              \n              {currentCase.patientInfo.age && (\n                <div className=\"mb-3\">\n                  <span className=\"text-sm font-medium text-gray-500\">年齢: </span>\n                  <span className=\"text-sm text-gray-900\">{currentCase.patientInfo.age}歳</span>\n                </div>\n              )}\n              \n              {currentCase.patientInfo.gender && (\n                <div className=\"mb-3\">\n                  <span className=\"text-sm font-medium text-gray-500\">性別: </span>\n                  <span className=\"text-sm text-gray-900\">\n                    {currentCase.patientInfo.gender === 'male' ? '男性' : \n                     currentCase.patientInfo.gender === 'female' ? '女性' : 'その他'}\n                  </span>\n                </div>\n              )}\n              \n              {/* タブナビゲーション */}\n              <div className=\"mt-6 border-b border-gray-200\">\n                <nav className=\"-mb-px flex space-x-8\">\n                  <button\n                    onClick={() => setActiveTab('vitals')}\n                    className={`py-2 px-1 border-b-2 font-medium text-sm ${\n                      activeTab === 'vitals'\n                        ? 'border-medical-primary text-medical-primary'\n                        : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n                    }`}\n                  >\n                    バイタル\n                  </button>\n                  <button\n                    onClick={() => setActiveTab('treatments')}\n                    className={`py-2 px-1 border-b-2 font-medium text-sm ${\n                      activeTab === 'treatments'\n                        ? 'border-medical-primary text-medical-primary'\n                        : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n                    }`}\n                  >\n                    処置記録\n                  </button>\n                </nav>\n              </div>\n\n              {/* タブコンテンツ */}\n              <div className=\"mt-4\">\n                {activeTab === 'vitals' ? (\n                  <VitalSignsComponent caseId={caseId!} />\n                ) : (\n                  <TreatmentComponent caseId={caseId!} />\n                )}\n              </div>\n            </div>\n          </div>\n          \n          {/* チャットエリア */}\n          <div className=\"mt-6 bg-white rounded-lg shadow p-6\">\n            <h3 className=\"text-lg font-medium text-gray-900 mb-4\">コミュニケーション</h3>\n            <div className=\"h-64\">\n              <ChatComponent caseId={caseId!} />\n            </div>\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n};"],"names":["generateDemoVitalSign","now","VitalSignsComponent","caseId","className","vitalSigns","setVitalSigns","useState","showForm","setShowForm","newVital","setNewVital","useEffect","demoVitals","handleAddVitalSign","vital","formatTime","timestamp","jsxs","jsx","Button","e","PRESET_MESSAGES","generateDemoMessages","ChatComponent","userInfo","useAuthStore","messages","setMessages","newMessage","setNewMessage","showPresets","setShowPresets","isRecording","setIsRecording","recognition","setRecognition","messagesEndRef","useRef","SpeechRecognition","speechRecognition","event","transcript","_a","sendMessage","text","messageType","message","handleKeyPress","startRecording","stopRecording","isOwnMessage","preset","PRESET_TREATMENTS","generateDemoTreatments","TreatmentComponent","treatments","setTreatments","newTreatment","setNewTreatment","addTreatment","name","details","treatment","handlePresetSelect","useGeolocation","options","state","setState","enableHighAccuracy","timeout","maximumAge","watch","onSuccess","position","onError","error","errorMessage","geoOptions","prev","watchId","LocationTracker","onLocationUpdate","isTracking","setIsTracking","location","loading","getCurrentPosition","toggleTracking","refreshLocation","formatCoordinate","value","BuildingInfoService","__publicField","latitude","longitude","other","point1","point2","lat1Rad","lat2Rad","deltaLatRad","deltaLonRad","config","radius","closestBuilding","minDistance","building","distance","query","buildingId","info","index","buildingInfoService","ElevatorInfoCard","elevator","getStatusColor","status","getStatusText","formatFloors","floors","sorted","a","b","groups","start","end","i","startStr","endStr","StaircaseInfoCard","staircase","getTypeIcon","type","getTypeText","getTypeColor","getWidthText","width","getWidthColor","ExitInfoCard","exit","formatFloor","floor","AccessibilityBadge","accessibility","score","maxScore","getBadgeColor","percentage","getBadgeText","getIcon","BuildingInfoComponent","buildingInfo","setBuildingInfo","setLoading","setError","isExpanded","setIsExpanded","loadBuildingInfo","response","err","formatDistance","getConfidenceColor","confidence","LoadingSpinner","CaseDetailPage","useParams","navigate","useNavigate","currentCase","loadCurrentCase","startObservingCase","stopObservingCase","updateStatus","useCaseStore","isMountedRef","activeTab","setActiveTab","currentLocation","setCurrentLocation","selectedRoute","setSelectedRoute","selectedHospital","setSelectedHospital","handleStatusUpdate","newStatus","getNextStatus","currentStatus","CASE_STATUS","handleLocationUpdate","nextStatus","MapComponent","RouteOptimizationComponent","route","hospital","Navigate"],"mappings":"oaAWA,MAAMA,EAAwB,IAAiB,CACvC,MAAAC,MAAU,KACT,MAAA,CACL,GAAI,SAAS,KAAK,IAAK,CAAA,GACvB,UAAW,CACT,OAAQ,IAAMA,EACd,SAAU,IAAMA,EAAI,QAAQ,EAC5B,QAAS,KAAK,MAAMA,EAAI,QAAA,EAAY,GAAI,EACxC,YAAa,CACf,EACA,GAAI,GAAK,KAAK,MAAM,KAAK,SAAW,EAAE,EACtC,KAAM,IAAM,KAAK,MAAM,KAAK,SAAW,EAAE,EACzC,KAAM,GAAK,KAAK,MAAM,KAAK,SAAW,EAAE,EACxC,KAAM,GAAK,KAAK,MAAM,KAAK,SAAW,CAAC,EACvC,WAAY,YACZ,OAAQ,EAAA,CAEZ,EAEaC,EAA0D,CAAC,CACtE,OAAAC,EACA,UAAAC,EAAY,EACd,IAAM,CACJ,KAAM,CAACC,EAAYC,CAAa,EAAIC,EAAA,SAAsB,CAAE,CAAA,EACtD,CAACC,EAAUC,CAAW,EAAIF,WAAS,EAAK,EACxC,CAACG,EAAUC,CAAW,EAAIJ,WAAS,CACvC,GAAI,GACJ,KAAM,GACN,KAAM,GACN,KAAM,EAAA,CACP,EAGDK,EAAAA,UAAU,IAAM,CACO,CACnB,MAAMC,EAAa,CACjBb,EAAsB,EACtBA,EAAsB,EACtBA,EAAsB,CAAA,EAExBM,EAAcO,CAAU,CAC1B,CACF,EAAG,CAAE,CAAA,EAEL,MAAMC,EAAqB,IAAM,CAC3B,GAAA,CAACJ,EAAS,IAAM,CAACA,EAAS,MAAQ,CAACA,EAAS,MAAQ,CAACA,EAAS,KAAM,CACtE,MAAM,iBAAiB,EACvB,MACF,CAEA,MAAMK,EAAmB,CACvB,GAAI,SAAS,KAAK,IAAK,CAAA,GACvB,UAAW,CACT,OAAQ,IAAM,IAAI,KAClB,SAAU,IAAM,KAAK,IAAI,EACzB,QAAS,KAAK,MAAM,KAAK,IAAA,EAAQ,GAAI,EACrC,YAAa,CACf,EACA,GAAI,SAASL,EAAS,EAAE,EACxB,KAAM,SAASA,EAAS,IAAI,EAC5B,KAAM,SAASA,EAAS,IAAI,EAC5B,KAAM,SAASA,EAAS,IAAI,EAC5B,WAAY,eACZ,OAAAP,CAAA,EAGFG,EAAc,CAACS,EAAO,GAAGV,CAAU,CAAC,EACxBM,EAAA,CAAE,GAAI,GAAI,KAAM,GAAI,KAAM,GAAI,KAAM,EAAA,CAAI,EACpDF,EAAY,EAAK,CAAA,EAGbO,EAAcC,IACLA,EAAU,OAASA,EAAU,SAAW,IAAI,KAAKA,EAAU,QAAU,GAAI,GAC1E,mBAAmB,QAAS,CAAE,KAAM,UAAW,OAAQ,UAAW,EAGhF,OACGC,EAAAA,KAAA,MAAA,CAAI,UAAW,GAAGd,CAAS,GAC1B,SAAA,CAACc,EAAAA,KAAA,MAAA,CAAI,UAAU,yCACb,SAAA,CAACC,EAAA,IAAA,KAAA,CAAG,UAAU,oCAAoC,SAAO,UAAA,EACzDA,EAAA,IAACC,EAAA,CACC,KAAK,KACL,QAAQ,UACR,QAAS,IAAMX,EAAY,CAACD,CAAQ,EACrC,SAAA,MAAA,CAED,CAAA,EACF,EAECA,GACCU,EAAA,KAAC,MAAI,CAAA,UAAU,iCACb,SAAA,CAACA,EAAAA,KAAA,MAAA,CAAI,UAAU,yBACb,SAAA,CAAAA,OAAC,MACC,CAAA,SAAA,CAACC,EAAA,IAAA,QAAA,CAAM,UAAU,mCAAmC,SAAS,YAAA,EAC7DA,EAAA,IAAC,QAAA,CACC,KAAK,SACL,MAAOT,EAAS,GAChB,SAAWW,GAAMV,EAAY,CAAE,GAAGD,EAAU,GAAIW,EAAE,OAAO,MAAO,EAChE,UAAU,0CACV,YAAY,IAAA,CACd,CAAA,EACF,SACC,MACC,CAAA,SAAA,CAACF,EAAA,IAAA,QAAA,CAAM,UAAU,mCAAmC,SAAQ,WAAA,EAC5DA,EAAA,IAAC,QAAA,CACC,KAAK,SACL,MAAOT,EAAS,KAChB,SAAWW,GAAMV,EAAY,CAAE,GAAGD,EAAU,KAAMW,EAAE,OAAO,MAAO,EAClE,UAAU,0CACV,YAAY,IAAA,CACd,CAAA,EACF,SACC,MACC,CAAA,SAAA,CAACF,EAAA,IAAA,QAAA,CAAM,UAAU,mCAAmC,SAAK,QAAA,EACzDA,EAAA,IAAC,QAAA,CACC,KAAK,SACL,MAAOT,EAAS,KAChB,SAAWW,GAAMV,EAAY,CAAE,GAAGD,EAAU,KAAMW,EAAE,OAAO,MAAO,EAClE,UAAU,0CACV,YAAY,KAAA,CACd,CAAA,EACF,SACC,MACC,CAAA,SAAA,CAACF,EAAA,IAAA,QAAA,CAAM,UAAU,mCAAmC,SAAK,QAAA,EACzDA,EAAA,IAAC,QAAA,CACC,KAAK,SACL,MAAOT,EAAS,KAChB,SAAWW,GAAMV,EAAY,CAAE,GAAGD,EAAU,KAAMW,EAAE,OAAO,MAAO,EAClE,UAAU,0CACV,YAAY,IAAA,CACd,CAAA,EACF,CAAA,EACF,EACAH,EAAAA,KAAC,MAAI,CAAA,UAAU,kCACb,SAAA,CAAAC,EAAA,IAACC,EAAA,CACC,KAAK,KACL,QAAQ,UACR,QAAS,IAAM,CACbX,EAAY,EAAK,EACLE,EAAA,CAAE,GAAI,GAAI,KAAM,GAAI,KAAM,GAAI,KAAM,EAAA,CAAI,CACtD,EACD,SAAA,OAAA,CAED,QACCS,EAAO,CAAA,KAAK,KAAK,QAASN,EAAoB,SAE/C,KAAA,CAAA,EACF,CAAA,EACF,EAGFK,EAAA,IAAC,MAAI,CAAA,UAAU,qCACZ,SAAAd,EAAW,SAAW,EACrBc,EAAAA,IAAC,IAAE,CAAA,UAAU,yCAAyC,SAAA,kBAAA,CAEtD,EAEAd,EAAW,IAAKU,GACbI,EAAAA,IAAA,MAAA,CAAmB,UAAU,iCAC5B,SAAAD,EAAA,KAAC,MAAI,CAAA,UAAU,mCACb,SAAA,CAACA,EAAAA,KAAA,MAAA,CAAI,UAAU,mCACb,SAAA,CAAAA,OAAC,MACC,CAAA,SAAA,CAACC,EAAA,IAAA,OAAA,CAAK,UAAU,gBAAgB,SAAG,MAAA,EAAQ,IAC3CD,EAAAA,KAAC,OAAK,CAAA,UAAU,cAAe,SAAA,CAAMH,EAAA,GAAG,MAAA,EAAI,CAAA,EAC9C,SACC,MACC,CAAA,SAAA,CAACI,EAAA,IAAA,OAAA,CAAK,UAAU,gBAAgB,SAAK,QAAA,EAAQ,IAC7CD,EAAAA,KAAC,OAAK,CAAA,UAAU,cAAe,SAAA,CAAMH,EAAA,KAAK,GAAA,EAAC,CAAA,EAC7C,SACC,MACC,CAAA,SAAA,CAACI,EAAA,IAAA,OAAA,CAAK,UAAU,gBAAgB,SAAG,MAAA,EAAQ,IAC3CD,EAAAA,KAAC,OAAK,CAAA,UAAU,cACb,SAAA,CAAMH,EAAA,KAAK,IAAEA,EAAM,KAAK,OAAA,EAC3B,CAAA,EACF,CAAA,EACF,QACC,OAAK,CAAA,UAAU,wBACb,SAAWC,EAAAD,EAAM,SAAS,EAC7B,CAAA,CAAA,CACF,CArBQ,EAAAA,EAAM,EAsBhB,CACD,CAEL,CAAA,CACF,CAAA,CAAA,CAEJ,ECzLMO,EAAkB,CACtB,WACA,WACA,UACA,WACA,WACA,WACF,EAGMC,EAAuB,IAAiB,CACtC,MAAAtB,MAAU,KACT,MAAA,CACL,CACE,GAAI,QACJ,UAAW,CACT,OAAQ,IAAM,IAAI,KAAKA,EAAI,QAAQ,EAAI,GAAK,GAAK,GAAI,EACrD,SAAU,IAAMA,EAAI,QAAQ,EAAI,GAAK,GAAK,IAC1C,QAAS,KAAK,OAAOA,EAAI,QAAY,EAAA,GAAK,GAAK,KAAQ,GAAI,EAC3D,YAAa,CACf,EACA,SAAU,aACV,WAAY,QACZ,KAAM,6BACN,OAAQ,GACR,YAAa,MACf,EACA,CACE,GAAI,QACJ,UAAW,CACT,OAAQ,IAAM,IAAI,KAAKA,EAAI,QAAQ,EAAI,GAAK,GAAK,GAAI,EACrD,SAAU,IAAMA,EAAI,QAAQ,EAAI,GAAK,GAAK,IAC1C,QAAS,KAAK,OAAOA,EAAI,QAAY,EAAA,GAAK,GAAK,KAAQ,GAAI,EAC3D,YAAa,CACf,EACA,SAAU,eACV,WAAY,QACZ,KAAM,uBACN,OAAQ,GACR,YAAa,MACf,EACA,CACE,GAAI,QACJ,UAAW,CACT,OAAQ,IAAM,IAAI,KAAKA,EAAI,QAAQ,EAAI,EAAI,GAAK,GAAI,EACpD,SAAU,IAAMA,EAAI,QAAQ,EAAI,EAAI,GAAK,IACzC,QAAS,KAAK,OAAOA,EAAI,QAAY,EAAA,EAAI,GAAK,KAAQ,GAAI,EAC1D,YAAa,CACf,EACA,SAAU,aACV,WAAY,QACZ,KAAM,WACN,OAAQ,GACR,YAAa,QACf,CAAA,CAEJ,EAEauB,EAA8C,CAAC,CAC1D,OAAArB,EACA,UAAAC,EAAY,EACd,IAAM,CACE,KAAA,CAAE,SAAAqB,GAAaC,IACf,CAACC,EAAUC,CAAW,EAAIrB,EAAA,SAAoB,CAAE,CAAA,EAChD,CAACsB,EAAYC,CAAa,EAAIvB,WAAS,EAAE,EACzC,CAACwB,EAAaC,CAAc,EAAIzB,WAAS,EAAK,EAC9C,CAAC0B,EAAaC,CAAc,EAAI3B,WAAS,EAAK,EAC9C,CAAC4B,EAAaC,CAAc,EAAI7B,WAAc,IAAI,EAClD8B,EAAiBC,SAAuB,IAAI,EAGlD1B,EAAAA,UAAU,IAAM,CAEZgB,EAAYL,GAAsB,CAEtC,EAAG,CAAE,CAAA,EAGLX,EAAAA,UAAU,IAAM,CACd,GAAI,OAAO,OAAW,KAAe,4BAA6B,OAAQ,CACxE,MAAM2B,EAAqB,OAAe,wBACpCC,EAAoB,IAAID,EAE9BC,EAAkB,WAAa,GAC/BA,EAAkB,eAAiB,GACnCA,EAAkB,KAAO,QAEPA,EAAA,SAAYC,GAAe,CAC3C,MAAMC,EAAaD,EAAM,QAAQ,CAAC,EAAE,CAAC,EAAE,WACvCX,EAAcY,CAAU,EACxBR,EAAe,EAAK,CAAA,EAGtBM,EAAkB,MAAQ,IAAM,CAC9BN,EAAe,EAAK,CAAA,EAGJM,EAAA,QAAWC,GAAe,CAClC,QAAA,MAAM,4BAA6BA,EAAM,KAAK,EACtDP,EAAe,EAAK,CAAA,EAGtBE,EAAeI,CAAiB,CAClC,CACF,EAAG,CAAE,CAAA,EAGL5B,EAAAA,UAAU,IAAM,QACd+B,EAAAN,EAAe,UAAf,MAAAM,EAAwB,eAAe,CAAE,SAAU,QAAU,EAAA,EAC5D,CAAChB,CAAQ,CAAC,EAEP,MAAAX,EAAcC,IACLA,EAAU,OAASA,EAAU,SAAW,IAAI,KAAKA,EAAU,QAAU,GAAI,GAC1E,mBAAmB,QAAS,CAAE,KAAM,UAAW,OAAQ,UAAW,EAG1E2B,EAAc,CAACC,EAAcC,EAAiC,SAAW,CACzE,GAAA,CAACD,EAAK,KAAK,EAAG,OAElB,MAAME,EAAmB,CACvB,GAAI,OAAO,KAAK,IAAK,CAAA,GACrB,UAAW,CACT,OAAQ,IAAM,IAAI,KAClB,SAAU,IAAM,KAAK,IAAI,EACzB,QAAS,KAAK,MAAM,KAAK,IAAA,EAAQ,GAAI,EACrC,YAAa,CACf,EACA,UAAUtB,GAAA,YAAAA,EAAU,MAAO,YAC3B,YAAYA,GAAA,YAAAA,EAAU,OAAQ,SAC9B,KAAMoB,EAAK,KAAK,EAChB,OAAA1C,EACA,YAAA2C,CAAA,EAGFlB,EAAY,CAAC,GAAGD,EAAUoB,CAAO,CAAC,EAClCjB,EAAc,EAAE,EAChBE,EAAe,EAAK,CAAA,EAGhBgB,EAAkB3B,GAA2B,CAC7CA,EAAE,MAAQ,SAAW,CAACA,EAAE,WAC1BA,EAAE,eAAe,EACjBuB,EAAYf,CAAU,EACxB,EAGIoB,EAAiB,IAAM,CACvBd,GAAe,CAACF,IAClBC,EAAe,EAAI,EACnBC,EAAY,MAAM,EACpB,EAGIe,EAAgB,IAAM,CACtBf,GAAeF,IACjBE,EAAY,KAAK,EACjBD,EAAe,EAAK,EACtB,EAGF,OACGhB,EAAA,KAAA,MAAA,CAAI,UAAW,wBAAwBd,CAAS,GAE/C,SAAA,CAACc,EAAAA,KAAA,MAAA,CAAI,UAAU,gDACZ,SAAA,CAASS,EAAA,SAAW,EACnBR,EAAAA,IAAC,IAAE,CAAA,UAAU,yCAAyC,SAAA,aAAA,CAEtD,EAEAQ,EAAS,IAAKoB,GAAY,CAClB,MAAAI,EAAeJ,EAAQ,YAAatB,GAAA,YAAAA,EAAU,KAElD,OAAAN,EAAA,IAAC,MAAA,CAEC,UAAW,QAAQgC,EAAe,cAAgB,eAAe,GAEjE,SAAAjC,EAAA,KAAC,MAAA,CACC,UAAW,6CACTiC,EACI,gCACA,2BACN,GAEA,SAAA,CAACjC,EAAAA,KAAA,MAAA,CAAI,UAAU,0BACZ,SAAA,CAAQ6B,EAAA,WAAW,MAAI/B,EAAW+B,EAAQ,SAAS,CAAA,EACtD,EACA7B,EAAAA,KAAC,MAAI,CAAA,UAAU,sBACZ,SAAA,CAAA6B,EAAQ,cAAgB,UACvB5B,MAAC,OAAK,CAAA,UAAU,oBAAoB,SAAE,KAAA,EAEvC4B,EAAQ,IAAA,EACX,CAAA,CAAA,CACF,CAAA,EAnBKA,EAAQ,EAAA,CAoBf,CAEH,EAEH5B,EAAAA,IAAC,MAAI,CAAA,IAAKkB,CAAgB,CAAA,CAAA,EAC5B,EAGCN,GACCb,EAAA,KAAC,MAAI,CAAA,UAAU,iCACb,SAAA,CAACC,EAAA,IAAA,MAAA,CAAI,UAAU,6BAA6B,SAAQ,WAAA,QACnD,MAAI,CAAA,UAAU,yBACZ,SAAgBG,EAAA,IAAK8B,GACpBjC,EAAA,IAAC,SAAA,CAEC,QAAS,IAAMyB,EAAYQ,EAAQ,QAAQ,EAC3C,UAAU,yFAET,SAAAA,CAAA,EAJIA,CAMR,CAAA,EACH,CAAA,EACF,EAIFlC,EAAAA,KAAC,MAAI,CAAA,UAAU,gBACb,SAAA,CAACA,EAAAA,KAAA,MAAA,CAAI,UAAU,iBACb,SAAA,CAAAC,EAAA,IAACC,EAAA,CACC,KAAK,KACL,QAAQ,UACR,QAAS,IAAMY,EAAe,CAACD,CAAW,EAC1C,UAAU,gBACX,SAAA,IAAA,CAED,EAGCI,GACChB,EAAA,IAACC,EAAA,CACC,KAAK,KACL,QAASa,EAAc,SAAW,UAClC,QAASA,EAAciB,EAAgBD,EACvC,UAAU,gBACV,MAAOhB,EAAc,OAAS,OAE7B,WACEd,EAAA,IAAA,MAAA,CAAI,UAAU,UAAU,KAAK,eAAe,QAAQ,YACnD,SAAAA,EAAAA,IAAC,QAAK,EAAE,IAAI,EAAE,IAAI,MAAM,IAAI,OAAO,IAAI,GAAG,IAAI,EAChD,EAEAA,EAAAA,IAAC,OAAI,UAAU,UAAU,KAAK,eAAe,QAAQ,YACnD,SAAAA,MAAC,QAAK,SAAS,UAAU,EAAE,wKAAwK,SAAS,SAAU,CAAA,EACxN,CAAA,CAEJ,EAGFA,EAAA,IAAC,QAAA,CACC,KAAK,OACL,MAAOU,EACP,SAAWR,GAAMS,EAAcT,EAAE,OAAO,KAAK,EAC7C,WAAY2B,EACZ,YAAaf,EAAc,WAAa,cACxC,UAAU,wGACV,SAAUA,CAAA,CACZ,EACAd,EAAA,IAACC,EAAA,CACC,KAAK,KACL,QAAS,IAAMwB,EAAYf,CAAU,EACrC,SAAU,CAACA,EAAW,KAAA,GAAUI,EACjC,SAAA,IAAA,CAED,CAAA,EACF,EAGCA,GACCf,EAAA,KAAC,MAAI,CAAA,UAAU,+CACb,SAAA,CAACC,EAAAA,IAAA,MAAA,CAAI,UAAU,oDAAqD,CAAA,EAAM,eAAA,EAE5E,EAID,CAACgB,GACAhB,EAAA,IAAC,MAAI,CAAA,UAAU,6BAA6B,SAE5C,6BAAA,CAAA,EAEJ,CACF,CAAA,CAAA,CAEJ,EC/RMkC,EAAoB,CACxB,SACA,SACA,QACA,cACA,OACA,OACA,OACA,OACA,OACA,MACF,EAGMC,EAAyB,IAAmB,CAC1C,MAAArD,MAAU,KACT,MAAA,CACL,CACE,GAAI,cACJ,UAAW,CACT,OAAQ,IAAM,IAAI,KAAKA,EAAI,QAAQ,EAAI,GAAK,GAAK,GAAI,EACrD,SAAU,IAAMA,EAAI,QAAQ,EAAI,GAAK,GAAK,IAC1C,QAAS,KAAK,OAAOA,EAAI,QAAY,EAAA,GAAK,GAAK,KAAQ,GAAI,EAC3D,YAAa,CACf,EACA,KAAM,SACN,QAAS,uCACT,WAAY,QACZ,OAAQ,EACV,EACA,CACE,GAAI,cACJ,UAAW,CACT,OAAQ,IAAM,IAAI,KAAKA,EAAI,QAAQ,EAAI,GAAK,GAAK,GAAI,EACrD,SAAU,IAAMA,EAAI,QAAQ,EAAI,GAAK,GAAK,IAC1C,QAAS,KAAK,OAAOA,EAAI,QAAY,EAAA,GAAK,GAAK,KAAQ,GAAI,EAC3D,YAAa,CACf,EACA,KAAM,SACN,QAAS,aACT,WAAY,QACZ,OAAQ,EACV,CAAA,CAEJ,EAEasD,EAAwD,CAAC,CACpE,OAAApD,EACA,UAAAC,EAAY,EACd,IAAM,CACJ,KAAM,CAACoD,EAAYC,CAAa,EAAIlD,EAAA,SAAsB,CAAE,CAAA,EACtD,CAACC,EAAUC,CAAW,EAAIF,WAAS,EAAK,EACxC,CAACwB,EAAaC,CAAc,EAAIzB,WAAS,EAAK,EAC9C,CAACmD,EAAcC,CAAe,EAAIpD,WAAS,CAC/C,KAAM,GACN,QAAS,EAAA,CACV,EAGDK,EAAAA,UAAU,IAAM,CAEZ6C,EAAcH,GAAwB,CAE1C,EAAG,CAAE,CAAA,EAEC,MAAAtC,EAAcC,IACLA,EAAU,OAASA,EAAU,SAAW,IAAI,KAAKA,EAAU,QAAU,GAAI,GAC1E,mBAAmB,QAAS,CAAE,KAAM,UAAW,OAAQ,UAAW,EAG1E2C,EAAe,CAACC,EAAcC,EAAkB,KAAO,CACvD,GAAA,CAACD,EAAK,OAAQ,CAChB,MAAM,cAAc,EACpB,MACF,CAEA,MAAME,EAAuB,CAC3B,GAAI,aAAa,KAAK,IAAK,CAAA,GAC3B,UAAW,CACT,OAAQ,IAAM,IAAI,KAClB,SAAU,IAAM,KAAK,IAAI,EACzB,QAAS,KAAK,MAAM,KAAK,IAAA,EAAQ,GAAI,EACrC,YAAa,CACf,EACA,KAAMF,EAAK,KAAK,EAChB,QAASC,EAAQ,KAAK,EACtB,WAAY,eACZ,OAAA3D,CAAA,EAGFsD,EAAc,CAACM,EAAW,GAAGP,CAAU,CAAC,EACxCG,EAAgB,CAAE,KAAM,GAAI,QAAS,EAAI,CAAA,EACzClD,EAAY,EAAK,EACjBuB,EAAe,EAAK,CAAA,EAGhBgC,EAAsBZ,GAAmB,CAC7CO,EAAgB,CAAE,GAAGD,EAAc,KAAMN,CAAQ,CAAA,EACjDpB,EAAe,EAAK,CAAA,EAGtB,OACGd,EAAAA,KAAA,MAAA,CAAI,UAAW,GAAGd,CAAS,GAC1B,SAAA,CAACc,EAAAA,KAAA,MAAA,CAAI,UAAU,yCACb,SAAA,CAACC,EAAA,IAAA,KAAA,CAAG,UAAU,oCAAoC,SAAI,OAAA,EACtDA,EAAA,IAACC,EAAA,CACC,KAAK,KACL,QAAQ,UACR,QAAS,IAAMX,EAAY,CAACD,CAAQ,EACrC,SAAA,MAAA,CAED,CAAA,EACF,EAECA,GACCU,EAAA,KAAC,MAAI,CAAA,UAAU,iCACb,SAAA,CAACA,EAAAA,KAAA,MAAA,CAAI,UAAU,YACb,SAAA,CAAAA,OAAC,MACC,CAAA,SAAA,CAACC,EAAA,IAAA,QAAA,CAAM,UAAU,mCAAmC,SAAG,MAAA,EACvDD,EAAAA,KAAC,MAAI,CAAA,UAAU,iBACb,SAAA,CAAAC,EAAA,IAAC,QAAA,CACC,KAAK,OACL,MAAOuC,EAAa,KACpB,SAAWrC,GAAMsC,EAAgB,CAAE,GAAGD,EAAc,KAAMrC,EAAE,OAAO,MAAO,EAC1E,UAAU,0CACV,YAAY,QAAA,CACd,EACAF,EAAA,IAACC,EAAA,CACC,KAAK,KACL,QAAQ,UACR,QAAS,IAAMY,EAAe,CAACD,CAAW,EAC3C,SAAA,IAAA,CAED,CAAA,EACF,EAECA,GACCb,EAAA,KAAC,MAAI,CAAA,UAAU,4DACb,SAAA,CAACC,EAAA,IAAA,MAAA,CAAI,UAAU,6BAA6B,SAAM,SAAA,QACjD,MAAI,CAAA,UAAU,YACZ,SAAkBkC,EAAA,IAAKD,GACtBjC,EAAA,IAAC,SAAA,CAEC,QAAS,IAAM6C,EAAmBZ,CAAM,EACxC,UAAU,qEAET,SAAAA,CAAA,EAJIA,CAMR,CAAA,EACH,CAAA,EACF,CAAA,EAEJ,SAEC,MACC,CAAA,SAAA,CAACjC,EAAA,IAAA,QAAA,CAAM,UAAU,mCAAmC,SAAK,QAAA,EACzDA,EAAA,IAAC,WAAA,CACC,MAAOuC,EAAa,QACpB,SAAWrC,GAAMsC,EAAgB,CAAE,GAAGD,EAAc,QAASrC,EAAE,OAAO,MAAO,EAC7E,UAAU,sDACV,KAAM,EACN,YAAY,SAAA,CACd,CAAA,EACF,CAAA,EACF,EAEAH,EAAAA,KAAC,MAAI,CAAA,UAAU,kCACb,SAAA,CAAAC,EAAA,IAACC,EAAA,CACC,KAAK,KACL,QAAQ,UACR,QAAS,IAAM,CACbX,EAAY,EAAK,EACjBuB,EAAe,EAAK,EACpB2B,EAAgB,CAAE,KAAM,GAAI,QAAS,EAAI,CAAA,CAC3C,EACD,SAAA,OAAA,CAED,EACAxC,EAAA,IAACC,EAAA,CACC,KAAK,KACL,QAAS,IAAMwC,EAAaF,EAAa,KAAMA,EAAa,OAAO,EACpE,SAAA,IAAA,CAED,CAAA,EACF,CAAA,EACF,EAGFvC,EAAAA,IAAC,OAAI,UAAU,qCACZ,WAAW,SAAW,QACpB,IAAE,CAAA,UAAU,yCAAyC,SAEtD,YAAA,CAAA,EAEAqC,EAAW,IAAKO,GACb7C,EAAAA,KAAA,MAAA,CAAuB,UAAU,iCAChC,SAAA,CAACA,EAAAA,KAAA,MAAA,CAAI,UAAU,wCACb,SAAA,CAAAC,EAAA,IAAC,MAAI,CAAA,UAAU,4BAA6B,SAAA4C,EAAU,KAAK,QAC1D,OAAK,CAAA,UAAU,wBACb,SAAW/C,EAAA+C,EAAU,SAAS,EACjC,CAAA,EACF,EACCA,EAAU,SACT5C,EAAA,IAAC,OAAI,UAAU,6BACZ,WAAU,QACb,EAEFD,EAAAA,KAAC,MAAI,CAAA,UAAU,wBAAwB,SAAA,CAAA,QAC/B6C,EAAU,UAAA,EAClB,CAdQ,CAAA,EAAAA,EAAU,EAepB,CACD,EAEL,CACF,CAAA,CAAA,CAEJ,EChNaE,EAAiB,CAACC,EAAiC,KAAO,CACrE,KAAM,CAACC,EAAOC,CAAQ,EAAI7D,WAA2B,CACnD,SAAU,KACV,MAAO,KACP,QAAS,EAAA,CACV,EAEK,CACJ,mBAAA8D,EAAqB,GACrB,QAAAC,EAAU,IACV,WAAAC,EAAa,IACb,MAAAC,EAAQ,EACN,EAAAN,EAEJtD,OAAAA,EAAAA,UAAU,IAAM,CACV,GAAA,CAAC,UAAU,YAAa,CACjBwD,EAAA,CACP,SAAU,KACV,MAAO,gDACP,QAAS,EAAA,CACV,EACD,MACF,CAEM,MAAAK,EAAaC,GAAkC,CAC1CN,EAAA,CACP,SAAU,CACR,SAAUM,EAAS,OAAO,SAC1B,UAAWA,EAAS,OAAO,UAC3B,SAAUA,EAAS,OAAO,QAC5B,EACA,MAAO,KACP,QAAS,EAAA,CACV,CAAA,EAGGC,EAAWC,GAAoC,CACnD,IAAIC,EAAe,0BAEnB,OAAQD,EAAM,KAAM,CAClB,KAAKA,EAAM,kBACMC,EAAA,sBACf,MACF,KAAKD,EAAM,qBACMC,EAAA,mBACf,MACF,KAAKD,EAAM,QACMC,EAAA,sBACf,KACJ,CAEST,EAAA,CACP,SAAU,KACV,MAAOS,EACP,QAAS,EAAA,CACV,CAAA,EAGGC,EAAa,CACjB,mBAAAT,EACA,QAAAC,EACA,WAAAC,CAAA,EAGFH,MAAkB,CAAE,GAAGW,EAAM,QAAS,EAAO,EAAA,EAEzC,IAAAC,EAEJ,OAAIR,EACFQ,EAAU,UAAU,YAAY,cAAcP,EAAWE,EAASG,CAAU,EAE5E,UAAU,YAAY,mBAAmBL,EAAWE,EAASG,CAAU,EAGlE,IAAM,CACPE,IAAY,QACJ,UAAA,YAAY,WAAWA,CAAO,CAC1C,GAED,CAACX,EAAoBC,EAASC,EAAYC,CAAK,CAAC,EAuD5C,CACL,GAAGL,EACH,mBAvDyB,IAAM,CAC3B,GAAA,CAAC,UAAU,YAAa,CAC1BC,EAAkBW,IAAA,CAChB,GAAGA,EACH,MAAO,gDACP,QAAS,EACT,EAAA,EACF,MACF,CAESX,EAAAW,IAAS,CAAE,GAAGA,EAAM,QAAS,GAAM,MAAO,IAAO,EAAA,EAE1D,UAAU,YAAY,mBACnBL,GAAa,CACHN,EAAA,CACP,SAAU,CACR,SAAUM,EAAS,OAAO,SAC1B,UAAWA,EAAS,OAAO,UAC3B,SAAUA,EAAS,OAAO,QAC5B,EACA,MAAO,KACP,QAAS,EAAA,CACV,CACH,EACCE,GAAU,CACT,IAAIC,EAAe,0BAEnB,OAAQD,EAAM,KAAM,CAClB,KAAKA,EAAM,kBACMC,EAAA,sBACf,MACF,KAAKD,EAAM,qBACMC,EAAA,mBACf,MACF,KAAKD,EAAM,QACMC,EAAA,sBACf,KACJ,CAEST,EAAA,CACP,SAAU,KACV,MAAOS,EACP,QAAS,EAAA,CACV,CACH,EACA,CACE,mBAAAR,EACA,QAAAC,EACA,WAAAC,CACF,CAAA,CACF,CAKA,CAEJ,ECpJaU,EAAkD,CAAC,CAC9D,UAAA7E,EAAY,GACZ,iBAAA8E,CACF,IAAM,CACJ,KAAM,CAACC,EAAYC,CAAa,EAAI7E,WAAS,EAAK,EAC5C,CAAE,SAAA8E,EAAU,MAAAT,EAAO,QAAAU,EAAS,mBAAAC,CAAA,EAAuBtB,EAAe,CACtE,MAAOkB,EACP,mBAAoB,GACpB,QAAS,IACT,WAAY,GAAA,CACb,EAEDvE,EAAAA,UAAU,IAAM,CACVyE,GAAYH,GACdA,EAAiBG,CAAQ,CAC3B,EACC,CAACA,EAAUH,CAAgB,CAAC,EAE/B,MAAMM,EAAiB,IAAM,CAC3BJ,EAAc,CAACD,CAAU,CAAA,EAGrBM,EAAkB,IAAM,CACTF,GAAA,EAGfG,EAAoBC,GACjBA,EAAM,QAAQ,CAAC,EAGlB3E,EAAa,IACN,IAAA,KAAA,EAAO,mBAAmB,OAAO,EAG9C,OACGE,EAAA,KAAA,MAAA,CAAI,UAAW,kCAAkCd,CAAS,GACzD,SAAA,CAACc,EAAAA,KAAA,MAAA,CAAI,UAAU,wCACb,SAAA,CAACC,EAAA,IAAA,KAAA,CAAG,UAAU,oCAAoC,SAAK,QAAA,EACvDD,EAAAA,KAAC,MAAI,CAAA,UAAU,iBACb,SAAA,CAAAC,EAAA,IAACC,EAAA,CACC,KAAK,KACL,QAAQ,UACR,QAASqE,EACT,SAAUH,EACX,SAAA,IAAA,CAED,EACAnE,EAAA,IAACC,EAAA,CACC,KAAK,KACL,QAAS+D,EAAa,SAAW,UACjC,QAASK,EAER,WAAa,KAAO,IAAA,CACvB,CAAA,EACF,CAAA,EACF,EAECF,GACCnE,EAAA,IAAC,MAAI,CAAA,UAAU,6BAA6B,SAE5C,cAAA,EAGDyD,GACC1D,EAAA,KAAC,MAAI,CAAA,UAAU,4BAA4B,SAAA,CAAA,QACnC0D,CAAA,EACR,EAGDS,GACCnE,EAAA,KAAC,MAAI,CAAA,UAAU,YACb,SAAA,CAACA,EAAAA,KAAA,MAAA,CAAI,UAAU,iCACb,SAAA,CAAAA,OAAC,MACC,CAAA,SAAA,CAACC,EAAA,IAAA,OAAA,CAAK,UAAU,gBAAgB,SAAG,MAAA,QAClC,MAAI,CAAA,UAAU,YAAa,SAAiBuE,EAAAL,EAAS,QAAQ,EAAE,CAAA,EAClE,SACC,MACC,CAAA,SAAA,CAAClE,EAAA,IAAA,OAAA,CAAK,UAAU,gBAAgB,SAAG,MAAA,QAClC,MAAI,CAAA,UAAU,YAAa,SAAiBuE,EAAAL,EAAS,SAAS,EAAE,CAAA,EACnE,CAAA,EACF,EAECA,EAAS,UACPnE,OAAA,MAAA,CAAI,UAAU,wBAAwB,SAAA,CAAA,QAC/B,KAAK,MAAMmE,EAAS,QAAQ,EAAE,GAAA,EACtC,EAGFnE,EAAAA,KAAC,MAAI,CAAA,UAAU,wBAAwB,SAAA,CAAA,SAC9BF,EAAW,CAAA,EACpB,EAECmE,GACCjE,EAAA,KAAC,MAAI,CAAA,UAAU,2CACb,SAAA,CAACC,EAAAA,IAAA,MAAA,CAAI,UAAU,sDAAuD,CAAA,EAAM,KAAA,EAE9E,CAAA,EAEJ,EAGD,CAACkE,GAAY,CAACC,GAAW,CAACV,GACxBzD,EAAA,IAAA,MAAA,CAAI,UAAU,yCAAyC,SAExD,eAAA,CAAA,CAEJ,CAAA,CAAA,CAEJ,EC7GA,MAAMyE,CAAoB,CAA1B,cACUC,EAAA,gBAA2B,CACjC,CACE,GAAI,aACJ,KAAM,MACN,KAAM,UACN,QAAS,gBACT,OAAQ,EACR,SAAU,EACV,UAAW,CACT,CACE,GAAI,QACJ,SAAU,SACV,SAAU,GACV,UAAW,KACX,OAAQ,CAAC,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,CAAC,EAChC,aAAc,GACd,OAAQ,SACV,EACA,CACE,GAAI,QACJ,SAAU,SACV,SAAU,GACV,UAAW,IACX,OAAQ,CAAC,GAAI,GAAI,EAAG,CAAC,EACrB,aAAc,GACd,OAAQ,SACV,CACF,EACA,WAAY,CACV,CACE,GAAI,UACJ,SAAU,UACV,KAAM,SACN,OAAQ,CAAC,GAAI,EAAG,CAAC,EACjB,MAAO,MACT,EACA,CACE,GAAI,UACJ,SAAU,UACV,KAAM,SACN,OAAQ,CAAC,GAAI,CAAC,EACd,MAAO,UACT,CACF,EACA,MAAO,CACL,CACE,GAAI,SACJ,KAAM,SACN,KAAM,OACN,MAAO,EACP,UAAW,KACX,aAAc,GACd,gBAAiB,CAAC,KAAM,KAAK,CAC/B,EACA,CACE,GAAI,SACJ,KAAM,SACN,KAAM,OACN,MAAO,EACP,UAAW,KACX,aAAc,GACd,gBAAiB,CAAC,QAAS,QAAQ,CACrC,EACA,CACE,GAAI,SACJ,KAAM,QACN,KAAM,OACN,MAAO,EACP,UAAW,KACX,aAAc,GACd,gBAAiB,CAAC,QAAS,SAAS,CACtC,CACF,EACA,cAAe,CACb,qBAAsB,GACtB,oBAAqB,GACrB,kBAAmB,GACnB,oBAAqB,GACrB,4BAA6B,EAC/B,EACA,iBAAkB,eAClB,SAAU,KAAK,mBAAmB,QAAS,QAAQ,EACnD,YAAiB,IAAA,KAAK,YAAY,CACpC,EACA,CACE,GAAI,aACJ,KAAM,WACN,KAAM,SACN,QAAS,kBACT,OAAQ,GACR,SAAU,EACV,UAAW,CACT,CACE,GAAI,QACJ,SAAU,YACV,SAAU,GACV,UAAW,KACX,OAAQ,CAAC,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,EAAE,EACtE,aAAc,GACd,OAAQ,SACV,EACA,CACE,GAAI,QACJ,SAAU,YACV,SAAU,GACV,UAAW,KACX,OAAQ,CAAC,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAE,EAC9J,aAAc,GACd,OAAQ,SACV,EACA,CACE,GAAI,QACJ,SAAU,YACV,SAAU,GACV,UAAW,KACX,OAAQ,CAAC,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAE,EAC1N,aAAc,GACd,OAAQ,SACV,CACF,EACA,WAAY,CACV,CACE,GAAI,UACJ,SAAU,SACV,KAAM,YACN,OAAQ,CAAC,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAE,EAC1N,MAAO,UACT,EACA,CACE,GAAI,UACJ,SAAU,SACV,KAAM,YACN,OAAQ,CAAC,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAE,EAC1N,MAAO,UACT,CACF,EACA,MAAO,CACL,CACE,GAAI,SACJ,KAAM,YACN,KAAM,OACN,MAAO,EACP,UAAW,KACX,aAAc,GACd,gBAAiB,CAAC,SAAU,gBAAgB,CAC9C,EACA,CACE,GAAI,SACJ,KAAM,OACN,KAAM,YACN,MAAO,EACP,UAAW,KACX,aAAc,EAChB,CACF,EACA,cAAe,CACb,qBAAsB,GACtB,oBAAqB,GACrB,kBAAmB,GACnB,oBAAqB,GACrB,4BAA6B,EAC/B,EACA,iBAAkB,eAClB,SAAU,KAAK,mBAAmB,QAAS,QAAQ,EACnD,YAAiB,IAAA,KAAK,YAAY,CACpC,EACA,CACE,GAAI,aACJ,KAAM,QACN,KAAM,WACN,QAAS,mBACT,OAAQ,GACR,SAAU,EACV,UAAW,CACT,CACE,GAAI,QACJ,SAAU,WACV,SAAU,GACV,UAAW,KACX,OAAQ,CAAC,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,EAAE,EAC9D,aAAc,GACd,OAAQ,SACV,CACF,EACA,WAAY,CACV,CACE,GAAI,UACJ,SAAU,UACV,KAAM,YACN,OAAQ,CAAC,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,EAAE,EAC9D,MAAO,MACT,CACF,EACA,MAAO,CACL,CACE,GAAI,SACJ,KAAM,UACN,KAAM,OACN,MAAO,EACP,UAAW,KACX,aAAc,GACd,gBAAiB,CAAC,MAAO,KAAK,CAChC,CACF,EACA,cAAe,CACb,qBAAsB,GACtB,oBAAqB,GACrB,kBAAmB,GACnB,oBAAqB,GACrB,4BAA6B,EAC/B,EACA,SAAU,KAAK,mBAAmB,OAAS,QAAQ,EACnD,YAAiB,IAAA,KAAK,YAAY,CACpC,CAAA,GAGM,mBAAmBC,EAAkBC,EAA6B,CACjE,MAAA,CACL,SAAAD,EACA,UAAAC,EACA,QAAUC,GACR,KAAK,IAAIF,EAAWE,EAAM,QAAQ,EAAI,MACtC,KAAK,IAAID,EAAYC,EAAM,SAAS,EAAI,IAAA,CAE9C,CAEQ,kBAAkBC,EAAkBC,EAA0B,CAEpE,MAAMC,EAAWF,EAAO,SAAW,KAAK,GAAM,IACxCG,EAAWF,EAAO,SAAW,KAAK,GAAM,IACxCG,GAAgBH,EAAO,SAAWD,EAAO,UAAY,KAAK,GAAM,IAChEK,GAAgBJ,EAAO,UAAYD,EAAO,WAAa,KAAK,GAAM,IAElE,EAAI,KAAK,IAAII,EAAc,CAAC,EAAI,KAAK,IAAIA,EAAc,CAAC,EACpD,KAAK,IAAIF,CAAO,EAAI,KAAK,IAAIC,CAAO,EACpC,KAAK,IAAIE,EAAc,CAAC,EAAI,KAAK,IAAIA,EAAc,CAAC,EAG9D,MAAO,SAFG,EAAI,KAAK,MAAM,KAAK,KAAK,CAAC,EAAG,KAAK,KAAK,EAAI,CAAC,CAAC,EAGzD,CAEA,MAAM,0BACJjB,EACAnB,EAAiC,GACF,CACvB,QAAA,IAAI,uDAAwDmB,CAAQ,EAExE,GAAA,CACF,OAAIkB,EAAO,SACF,KAAK,oBAAoBlB,EAAUnB,CAAO,EAK5C,CACL,SAAU,KACV,WAAY,CAAA,QAEPU,EAAO,CACN,eAAA,MAAM,+BAAgCA,CAAK,EAC5C,CACL,SAAU,KACV,WAAY,CAAA,CAEhB,CACF,CAEQ,oBACNS,EACAnB,EACsB,CAChB,MAAAsC,EAAStC,EAAQ,QAAU,IAEjC,IAAIuC,EAAuC,KACvCC,EAAc,IAEP,UAAAC,KAAY,KAAK,SAAU,CACpC,MAAMC,EAAW,KAAK,kBAAkBvB,EAAUsB,EAAS,QAAQ,EAE/D,GAAAC,GAAYJ,GAAUI,EAAWF,EAAa,CAOhD,GALIxC,EAAQ,eAAiB,CAACA,EAAQ,cAAc,SAASyC,EAAS,IAAI,GAKtEzC,EAAQ,sBAAwB,CAACyC,EAAS,cAAc,qBAC1D,SAGgBF,EAAAE,EACJD,EAAAE,CAChB,CACF,CAEO,MAAA,CACL,SAAUH,EACV,SAAUA,EAAkBC,EAAc,OAC1C,WAAYD,EAAkB,KAAK,IAAI,GAAK,EAAKC,EAAcF,CAAO,EAAI,CAAA,CAE9E,CAEA,MAAM,gBAAgBK,EAAwC,CACpD,QAAA,IAAI,mDAAoDA,CAAK,EAEjE,GAAA,CACF,OAAIN,EAAO,SACF,KAAK,SAAS,UACnBI,EAAS,KAAK,YAAY,EAAE,SAASE,EAAM,YAAa,CAAA,GACxDF,EAAS,QAAQ,YAAA,EAAc,SAASE,EAAM,aAAa,CAAA,EAKxD,SACAjC,EAAO,CACN,eAAA,MAAM,8BAA+BA,CAAK,EAC3C,EACT,CACF,CAEA,MAAM,mBAAmBkC,EAAoBC,EAA4C,CAC/E,QAAA,IAAI,2CAA4CD,EAAYC,CAAI,EAEpE,GAAA,CACF,GAAIR,EAAO,SAAU,CACnB,MAAMS,EAAQ,KAAK,SAAS,UAAsBL,GAAAA,EAAS,KAAOG,CAAU,EACxEE,IAAU,KACP,KAAA,SAASA,CAAK,EAAI,CAAE,GAAG,KAAK,SAASA,CAAK,EAAG,GAAGD,IAEvD,MACF,QAIOnC,EAAO,CACN,cAAA,MAAM,kCAAmCA,CAAK,EAChDA,CACR,CACF,CACF,CAEa,MAAAqC,EAAsB,IAAIrB,ECxV1BsB,EAAoD,CAAC,CAAE,SAAAC,KAAe,CAC3E,MAAAC,EAAkBC,GAAoB,CAC1C,OAAQA,EAAQ,CACd,IAAK,UACI,MAAA,6BACT,IAAK,cACI,MAAA,+BACT,IAAK,UACL,QACS,MAAA,0BACX,CAAA,EAGIC,EAAiBD,GAAoB,CACzC,OAAQA,EAAQ,CACd,IAAK,UACI,MAAA,MACT,IAAK,cACI,MAAA,UACT,IAAK,UACL,QACS,MAAA,MACX,CAAA,EAGIE,EAAgBC,GAA6B,CAC3C,MAAAC,EAAS,CAAC,GAAGD,CAAM,EAAE,KAAK,CAACE,EAAGC,IAAMD,EAAIC,CAAC,EACzCC,EAAmB,CAAA,EACrB,IAAAC,EAAQJ,EAAO,CAAC,EAChBK,EAAML,EAAO,CAAC,EAElB,QAASM,EAAI,EAAGA,EAAIN,EAAO,OAAQM,IACjC,GAAIN,EAAOM,CAAC,IAAMD,EAAM,EACtBA,EAAML,EAAOM,CAAC,MACT,CACL,GAAIF,IAAUC,EACZF,EAAO,KAAKC,IAAU,EAAI,IAAMA,EAAQ,EAAI,IAAI,KAAK,IAAIA,CAAK,CAAC,GAAK,GAAGA,CAAK,EAAE,MACzE,CACL,MAAMG,EAAWH,IAAU,EAAI,IAAMA,EAAQ,EAAI,IAAI,KAAK,IAAIA,CAAK,CAAC,GAAK,GAAGA,CAAK,GAC3EI,EAASH,IAAQ,EAAI,IAAMA,EAAM,EAAI,IAAI,KAAK,IAAIA,CAAG,CAAC,GAAK,GAAGA,CAAG,GACvEF,EAAO,KAAK,GAAGI,CAAQ,IAAIC,CAAM,EAAE,CACrC,CACAJ,EAAQJ,EAAOM,CAAC,EAChBD,EAAML,EAAOM,CAAC,CAChB,CAGF,GAAIF,IAAUC,EACZF,EAAO,KAAKC,IAAU,EAAI,IAAMA,EAAQ,EAAI,IAAI,KAAK,IAAIA,CAAK,CAAC,GAAK,GAAGA,CAAK,EAAE,MACzE,CACL,MAAMG,EAAWH,IAAU,EAAI,IAAMA,EAAQ,EAAI,IAAI,KAAK,IAAIA,CAAK,CAAC,GAAK,GAAGA,CAAK,GAC3EI,EAASH,IAAQ,EAAI,IAAMA,EAAM,EAAI,IAAI,KAAK,IAAIA,CAAG,CAAC,GAAK,GAAGA,CAAG,GACvEF,EAAO,KAAK,GAAGI,CAAQ,IAAIC,CAAM,EAAE,CACrC,CAEO,OAAAL,EAAO,KAAK,IAAI,EAAI,GAAA,EAI3B,OAAA1G,EAAA,KAAC,MAAI,CAAA,UAAU,iCACb,SAAA,CAACA,EAAAA,KAAA,MAAA,CAAI,UAAU,wCACb,SAAA,CAACA,EAAAA,KAAA,MAAA,CAAI,UAAU,SACb,SAAA,CAAAC,EAAA,IAAC,MAAI,CAAA,UAAU,4BAA6B,SAAAgG,EAAS,SAAS,EAC9DjG,EAAAA,KAAC,MAAI,CAAA,UAAU,qBAAqB,SAAA,CAAA,OAC7BiG,EAAS,SAAS,WAASA,EAAS,UAAU,IAAA,EACrD,CAAA,EACF,EAEAjG,EAAAA,KAAC,MAAI,CAAA,UAAU,8BACZ,SAAA,CAAAiG,EAAS,cACRjG,OAAC,MAAI,CAAA,UAAU,kCACb,SAAA,CAAAC,MAAC,MAAI,CAAA,UAAU,eAAe,KAAK,eAAe,QAAQ,YACxD,SAACA,EAAA,IAAA,OAAA,CAAK,SAAS,UAAU,EAAE,wIAAwI,SAAS,SAAU,CAAA,EACxL,EACAA,EAAAA,IAAC,QAAK,SAAK,OAAA,CAAA,CAAA,EACb,EAGDgG,EAAS,QACPhG,MAAA,OAAA,CAAK,UAAW,yCAAyCiG,EAAeD,EAAS,MAAM,CAAC,GACtF,SAAcG,EAAAH,EAAS,MAAM,EAChC,CAAA,EAEJ,CAAA,EACF,EAEAjG,EAAAA,KAAC,MAAI,CAAA,UAAU,gBACb,SAAA,CAACC,EAAA,IAAA,OAAA,CAAK,UAAU,cAAc,SAAI,OAAA,EAAO,IAAEoG,EAAaJ,EAAS,MAAM,CAAA,EACzE,CACF,CAAA,CAAA,CAEJ,EC3Fae,EAAsD,CAAC,CAAE,UAAAC,KAAgB,CAC9E,MAAAC,EAAeC,GAAiB,CACpC,OAAQA,EAAM,CACZ,IAAK,YAED,OAAAlH,MAAC,OAAI,UAAU,UAAU,KAAK,OAAO,OAAO,eAAe,QAAQ,YACjE,eAAC,OAAK,CAAA,cAAc,QAAQ,eAAe,QAAQ,YAAY,IAAI,EAAE,uBAAwB,CAAA,CAC/F,CAAA,EAEJ,IAAK,YACH,aACG,MAAI,CAAA,UAAU,UAAU,KAAK,eAAe,QAAQ,YACnD,SAACA,EAAA,IAAA,OAAA,CAAK,SAAS,UAAU,EAAE,oNAAoN,SAAS,UAAU,CACpQ,CAAA,EAEJ,QAEI,OAAAA,MAAC,OAAI,UAAU,UAAU,KAAK,OAAO,OAAO,eAAe,QAAQ,YACjE,eAAC,OAAK,CAAA,cAAc,QAAQ,eAAe,QAAQ,YAAY,IAAI,EAAE,2BAA4B,CAAA,CACnG,CAAA,CAEN,CAAA,EAGImH,EAAeD,GAAiB,CACpC,OAAQA,EAAM,CACZ,IAAK,YACI,MAAA,UACT,IAAK,YACI,MAAA,OACT,QACS,MAAA,MACX,CAAA,EAGIE,EAAgBF,GAAiB,CACrC,OAAQA,EAAM,CACZ,IAAK,YACI,MAAA,gBACT,IAAK,YACI,MAAA,eACT,QACS,MAAA,eACX,CAAA,EAGIG,EAAgBC,GAAkB,CACtC,OAAQA,EAAO,CACb,IAAK,SACI,MAAA,KACT,IAAK,OACI,MAAA,KACT,QACS,MAAA,IACX,CAAA,EAGIC,EAAiBD,GAAkB,CACvC,OAAQA,EAAO,CACb,IAAK,SACI,MAAA,eACT,IAAK,OACI,MAAA,iBACT,QACS,MAAA,eACX,CAAA,EAGIlB,EAAgBC,GAA6B,CAC3C,MAAAC,EAAS,CAAC,GAAGD,CAAM,EAAE,KAAK,CAACE,EAAGC,IAAMD,EAAIC,CAAC,EACzCC,EAAmB,CAAA,EACrB,IAAAC,EAAQJ,EAAO,CAAC,EAChBK,EAAML,EAAO,CAAC,EAElB,QAASM,EAAI,EAAGA,EAAIN,EAAO,OAAQM,IACjC,GAAIN,EAAOM,CAAC,IAAMD,EAAM,EACtBA,EAAML,EAAOM,CAAC,MACT,CACL,GAAIF,IAAUC,EACZF,EAAO,KAAKC,IAAU,EAAI,IAAMA,EAAQ,EAAI,IAAI,KAAK,IAAIA,CAAK,CAAC,GAAK,GAAGA,CAAK,EAAE,MACzE,CACL,MAAMG,EAAWH,IAAU,EAAI,IAAMA,EAAQ,EAAI,IAAI,KAAK,IAAIA,CAAK,CAAC,GAAK,GAAGA,CAAK,GAC3EI,EAASH,IAAQ,EAAI,IAAMA,EAAM,EAAI,IAAI,KAAK,IAAIA,CAAG,CAAC,GAAK,GAAGA,CAAG,GACvEF,EAAO,KAAK,GAAGI,CAAQ,IAAIC,CAAM,EAAE,CACrC,CACAJ,EAAQJ,EAAOM,CAAC,EAChBD,EAAML,EAAOM,CAAC,CAChB,CAGF,GAAIF,IAAUC,EACZF,EAAO,KAAKC,IAAU,EAAI,IAAMA,EAAQ,EAAI,IAAI,KAAK,IAAIA,CAAK,CAAC,GAAK,GAAGA,CAAK,EAAE,MACzE,CACL,MAAMG,EAAWH,IAAU,EAAI,IAAMA,EAAQ,EAAI,IAAI,KAAK,IAAIA,CAAK,CAAC,GAAK,GAAGA,CAAK,GAC3EI,EAASH,IAAQ,EAAI,IAAMA,EAAM,EAAI,IAAI,KAAK,IAAIA,CAAG,CAAC,GAAK,GAAGA,CAAG,GACvEF,EAAO,KAAK,GAAGI,CAAQ,IAAIC,CAAM,EAAE,CACrC,CAEO,OAAAL,EAAO,KAAK,IAAI,EAAI,GAAA,EAI3B,OAAA1G,EAAA,KAAC,MAAI,CAAA,UAAU,iCACb,SAAA,CAACA,EAAAA,KAAA,MAAA,CAAI,UAAU,wCACb,SAAA,CAACA,EAAAA,KAAA,MAAA,CAAI,UAAU,SACb,SAAA,CAAAC,EAAA,IAAC,MAAI,CAAA,UAAU,4BAA6B,SAAAgH,EAAU,SAAS,EAC/DjH,EAAAA,KAAC,MAAI,CAAA,UAAU,qBAAqB,SAAA,CAAA,QAC5BqG,EAAaY,EAAU,MAAM,CAAA,EACrC,CAAA,EACF,EAEAjH,EAAAA,KAAC,MAAI,CAAA,UAAU,8BACb,SAAA,CAAAA,EAAAA,KAAC,OAAI,UAAW,qBAAqBqH,EAAaJ,EAAU,IAAI,CAAC,GAC9D,SAAA,CAAAC,EAAYD,EAAU,IAAI,QAC1B,OAAK,CAAA,UAAU,OAAQ,SAAYG,EAAAH,EAAU,IAAI,EAAE,CAAA,EACtD,EAEAjH,OAAC,OAAI,UAAW,GAAGwH,EAAcP,EAAU,KAAK,CAAC,GAAI,SAAA,CAAA,MAC/CK,EAAaL,EAAU,KAAK,CAAA,EAClC,CAAA,EACF,CAAA,EACF,EAECA,EAAU,OAAS,aACjBhH,EAAAA,IAAA,MAAA,CAAI,UAAU,0CACb,SAAAD,EAAA,KAAC,MAAI,CAAA,UAAU,4BACb,SAAA,CAAAC,MAAC,MAAI,CAAA,UAAU,eAAe,KAAK,eAAe,QAAQ,YACxD,SAACA,EAAA,IAAA,OAAA,CAAK,SAAS,UAAU,EAAE,mIAAmI,SAAS,SAAU,CAAA,EACnL,EAAM,OAAA,CAAA,CAER,CACF,CAAA,EAGDgH,EAAU,OAAS,aACjBhH,EAAAA,IAAA,MAAA,CAAI,UAAU,4CACb,SAAAD,EAAA,KAAC,MAAI,CAAA,UAAU,4BACb,SAAA,CAAAC,MAAC,MAAI,CAAA,UAAU,eAAe,KAAK,eAAe,QAAQ,YACxD,SAACA,EAAA,IAAA,OAAA,CAAK,SAAS,UAAU,EAAE,mIAAmI,SAAS,SAAU,CAAA,EACnL,EAAM,iBAAA,CAAA,CAER,CACF,CAAA,CAEJ,CAAA,CAAA,CAEJ,EClJawH,GAA4C,CAAC,CAAE,KAAAC,KAAW,CAC/D,MAAAR,EAAeC,GAAiB,CACpC,OAAQA,EAAM,CACZ,IAAK,OAED,OAAAlH,MAAC,OAAI,UAAU,UAAU,KAAK,OAAO,OAAO,eAAe,QAAQ,YACjE,eAAC,OAAK,CAAA,cAAc,QAAQ,eAAe,QAAQ,YAAY,IAAI,EAAE,2FAA4F,CAAA,CACnK,CAAA,EAEJ,IAAK,YACH,aACG,MAAI,CAAA,UAAU,UAAU,KAAK,eAAe,QAAQ,YACnD,SAACA,EAAA,IAAA,OAAA,CAAK,SAAS,UAAU,EAAE,oNAAoN,SAAS,UAAU,CACpQ,CAAA,EAEJ,IAAK,UAED,OAAAD,OAAC,OAAI,UAAU,UAAU,KAAK,OAAO,OAAO,eAAe,QAAQ,YACjE,SAAA,CAACC,EAAAA,IAAA,OAAA,CAAK,cAAc,QAAQ,eAAe,QAAQ,YAAY,IAAI,EAAE,qeAAse,CAAA,EAC3iBA,EAAAA,IAAC,QAAK,cAAc,QAAQ,eAAe,QAAQ,YAAY,IAAI,EAAE,kCAAmC,CAAA,CAC1G,CAAA,CAAA,EAEJ,QAEI,OAAAA,MAAC,OAAI,UAAU,UAAU,KAAK,OAAO,OAAO,eAAe,QAAQ,YACjE,eAAC,OAAK,CAAA,cAAc,QAAQ,eAAe,QAAQ,YAAY,IAAI,EAAE,2BAA4B,CAAA,CACnG,CAAA,CAEN,CAAA,EAGImH,EAAeD,GAAiB,CACpC,OAAQA,EAAM,CACZ,IAAK,OACI,MAAA,SACT,IAAK,YACI,MAAA,MACT,IAAK,UACI,MAAA,UACT,QACS,MAAA,KACX,CAAA,EAGIE,EAAgBF,GAAiB,CACrC,OAAQA,EAAM,CACZ,IAAK,OACI,MAAA,2BACT,IAAK,YACI,MAAA,yBACT,IAAK,UACI,MAAA,2BACT,QACS,MAAA,0BACX,CAAA,EAGIQ,EAAeC,GACfA,IAAU,EAAU,KACpBA,EAAQ,EAAU,IAAI,KAAK,IAAIA,CAAK,CAAC,IAClC,GAAGA,CAAK,IAIf,OAAA5H,EAAA,KAAC,MAAI,CAAA,UAAU,iCACb,SAAA,CAACA,EAAAA,KAAA,MAAA,CAAI,UAAU,wCACb,SAAA,CAACA,EAAAA,KAAA,MAAA,CAAI,UAAU,SACb,SAAA,CAACA,EAAAA,KAAA,MAAA,CAAI,UAAU,mCACb,SAAA,CAAAC,EAAA,IAAC,MAAI,CAAA,UAAU,4BAA6B,SAAAyH,EAAK,KAAK,EACrDA,EAAK,cACH1H,OAAA,MAAA,CAAI,UAAU,kCACb,SAAA,CAAAC,MAAC,MAAI,CAAA,UAAU,eAAe,KAAK,eAAe,QAAQ,YACxD,SAACA,EAAA,IAAA,OAAA,CAAK,SAAS,UAAU,EAAE,wIAAwI,SAAS,SAAU,CAAA,EACxL,EACAA,EAAAA,IAAC,QAAK,SAAM,QAAA,CAAA,CAAA,EACd,CAAA,EAEJ,EAEAD,EAAAA,KAAC,MAAI,CAAA,UAAU,gBACZ,SAAA,CAAA2H,EAAYD,EAAK,KAAK,EAAE,MAAIA,EAAK,SAAA,EACpC,CAAA,EACF,EAEA1H,EAAAA,KAAC,OAAI,UAAW,2DAA2DqH,EAAaK,EAAK,IAAI,CAAC,GAC/F,SAAA,CAAAR,EAAYQ,EAAK,IAAI,QACrB,OAAK,CAAA,UAAU,OAAQ,SAAYN,EAAAM,EAAK,IAAI,EAAE,CAAA,EACjD,CAAA,EACF,EAECA,EAAK,iBAAmBA,EAAK,gBAAgB,OAAS,GACpDzH,EAAAA,IAAA,MAAA,CAAI,UAAU,+BACb,SAACD,EAAA,KAAA,MAAA,CAAI,UAAU,iBACb,SAAA,CAACC,EAAA,IAAA,OAAA,CAAK,UAAU,cAAc,SAAM,SAAA,EAAO,IAAEyH,EAAK,gBAAgB,KAAK,IAAI,CAAA,CAAA,CAC7E,CACF,CAAA,EAGDA,EAAK,OAAS,aACZzH,EAAAA,IAAA,MAAA,CAAI,UAAU,0CACb,SAAAD,EAAA,KAAC,MAAI,CAAA,UAAU,4BACb,SAAA,CAAAC,MAAC,MAAI,CAAA,UAAU,eAAe,KAAK,eAAe,QAAQ,YACxD,SAACA,EAAA,IAAA,OAAA,CAAK,SAAS,UAAU,EAAE,mIAAmI,SAAS,SAAU,CAAA,EACnL,EAAM,UAAA,CAAA,CAER,CACF,CAAA,EAGDyH,EAAK,OAAS,QACZzH,EAAAA,IAAA,MAAA,CAAI,UAAU,4CACb,SAAAD,EAAA,KAAC,MAAI,CAAA,UAAU,4BACb,SAAA,CAAAC,MAAC,MAAI,CAAA,UAAU,eAAe,KAAK,eAAe,QAAQ,YACxD,SAACA,EAAA,IAAA,OAAA,CAAK,SAAS,UAAU,EAAE,mIAAmI,SAAS,SAAU,CAAA,EACnL,EAAM,WAAA,CAAA,CAER,CACF,CAAA,CAEJ,CAAA,CAAA,CAEJ,ECxHa4H,GAAwD,CAAC,CACpE,cAAAC,EACA,UAAA5I,EAAY,EACd,IAAM,CAWJ,MAAM6I,GAVwB,IAAc,CAC1C,IAAIA,EAAQ,EACZ,OAAID,EAAc,sBAAsBC,IACpCD,EAAc,qBAAqBC,IACnCD,EAAc,mBAAmBC,IACjCD,EAAc,qBAAqBC,IACnCD,EAAc,6BAA6BC,IACxCA,CAAA,KAIHC,EAAW,EAEXC,EAAgB,IAAc,CAClC,MAAMC,EAAaH,EAAQC,EAC3B,OAAIE,GAAc,GAAY,+CAC1BA,GAAc,GAAY,kDAC1BA,GAAc,GAAY,kDACvB,wCAAA,EAGHC,EAAe,IAAc,CACjC,MAAMD,EAAaH,EAAQC,EAC3B,OAAIE,GAAc,GAAY,WAC1BA,GAAc,GAAY,WAC1BA,GAAc,GAAY,QACvB,KAAA,EAGHE,EAAU,IACVN,EAAc,2BAEb,MAAI,CAAA,UAAU,UAAU,KAAK,eAAe,QAAQ,YACnD,SAAC7H,EAAA,IAAA,OAAA,CAAK,SAAS,UAAU,EAAE,wIAAwI,SAAS,UAAU,CACxL,CAAA,QAID,MAAI,CAAA,UAAU,UAAU,KAAK,eAAe,QAAQ,YACnD,SAACA,EAAA,IAAA,OAAA,CAAK,SAAS,UAAU,EAAE,mIAAmI,SAAS,UAAU,CACnL,CAAA,EAKF,OAAAD,OAAC,OAAI,UAAW,8EAA8EiI,GAAe,IAAI/I,CAAS,GACvH,SAAA,CAAQkJ,EAAA,EACRnI,EAAA,IAAA,OAAA,CAAK,UAAU,OAAQ,aAAe,EACvCD,EAAAA,KAAC,OAAK,CAAA,UAAU,kBAAkB,SAAA,CAAA,IAAE+H,EAAM,IAAEC,EAAS,GAAA,EAAC,CACxD,CAAA,CAAA,CAEJ,EChDaK,GAA8D,CAAC,CAC1E,SAAAlE,EACA,UAAAjF,EAAY,EACd,IAAM,CACJ,KAAM,CAACoJ,EAAcC,CAAe,EAAIlJ,WAAsC,IAAI,EAC5E,CAAC+E,EAASoE,CAAU,EAAInJ,WAAS,EAAK,EACtC,CAACqE,EAAO+E,CAAQ,EAAIpJ,WAAwB,IAAI,EAChD,CAACqJ,EAAYC,CAAa,EAAItJ,WAAS,EAAK,EAElDK,EAAAA,UAAU,IAAM,CACGkJ,GAAA,EAChB,CAACzE,CAAQ,CAAC,EAEb,MAAMyE,EAAmB,SAAY,CACnC,GAAKzE,EAEL,CAAAqE,EAAW,EAAI,EACfC,EAAS,IAAI,EAET,GAAA,CACF,MAAMI,EAAW,MAAM9C,EAAoB,0BAA0B5B,EAAU,CAC7E,OAAQ,GAAA,CACT,EAEDoE,EAAgBM,CAAQ,QACjBC,EAAK,CACJ,QAAA,MAAM,gCAAiCA,CAAG,EAClDL,EAAS,gBAAgB,CAAA,QACzB,CACAD,EAAW,EAAK,CAClB,EAAA,EAGIO,EAAkBrD,GACjBA,EACDA,EAAW,IACN,GAAG,KAAK,MAAMA,CAAQ,CAAC,IAEzB,IAAIA,EAAW,KAAM,QAAQ,CAAC,CAAC,KAJhB,GAOlBsD,EAAsBC,GACtBA,GAAc,GAAY,iBAC1BA,GAAc,GAAY,kBACvB,eAGT,GAAI7E,EAEA,OAAAnE,EAAA,IAAC,OAAI,UAAW,kCAAkCf,CAAS,GACzD,SAAAc,EAAA,KAAC,MAAI,CAAA,UAAU,wCACb,SAAA,CAACC,EAAAA,IAAAiJ,EAAA,CAAe,KAAK,IAAK,CAAA,EACzBjJ,EAAA,IAAA,OAAA,CAAK,UAAU,6BAA6B,SAAW,cAAA,CAAA,CAC1D,CAAA,CACF,CAAA,EAIJ,GAAIyD,EACF,OACG1D,EAAA,KAAA,MAAA,CAAI,UAAW,kCAAkCd,CAAS,GACzD,SAAA,CAACe,EAAAA,IAAA,MAAA,CAAI,UAAU,yCACb,SAAAA,EAAA,IAAC,MAAG,UAAU,oCAAoC,gBAAI,CACxD,CAAA,EACCA,EAAA,IAAA,MAAA,CAAI,UAAU,uBAAwB,SAAMyD,EAAA,CAC/C,CAAA,CAAA,EAIA,GAAA,EAAC4E,GAAA,MAAAA,EAAc,UACjB,OACGtI,EAAA,KAAA,MAAA,CAAI,UAAW,kCAAkCd,CAAS,GACzD,SAAA,CAACe,EAAAA,IAAA,MAAA,CAAI,UAAU,yCACb,SAAAA,EAAA,IAAC,MAAG,UAAU,oCAAoC,gBAAI,CACxD,CAAA,EACCA,EAAA,IAAA,MAAA,CAAI,UAAU,wBAAwB,SAEvC,uBAAA,CACF,CAAA,CAAA,EAIJ,MAAMwF,EAAW6C,EAAa,SAG5B,OAAAtI,EAAA,KAAC,MAAI,CAAA,UAAW,iDAAiDd,CAAS,GAAI,MAAO,CAAC,gBAAiB,SAAA,EACrG,SAAA,CAACc,EAAAA,KAAA,MAAA,CAAI,UAAU,yCACb,SAAA,CAACA,EAAAA,KAAA,MAAA,CAAI,UAAU,SACb,SAAA,CAACA,EAAAA,KAAA,MAAA,CAAI,UAAU,8BACb,SAAA,CAAAC,EAAA,IAAC,KAAG,CAAA,UAAU,oCAAqC,SAAAwF,EAAS,KAAK,EAChExF,EAAAA,IAAA4H,GAAA,CAAmB,cAAepC,EAAS,aAAe,CAAA,CAAA,EAC7D,EACCxF,EAAA,IAAA,MAAA,CAAI,UAAU,6BACZ,WAAS,QACZ,EACCqI,EAAa,UACXtI,OAAA,MAAA,CAAI,UAAU,wBAAwB,SAAA,CAAA,OAChC+I,EAAeT,EAAa,QAAQ,EACzCtI,EAAAA,KAAC,QAAK,UAAW,QAAQgJ,EAAmBV,EAAa,UAAU,CAAC,GAAI,SAAA,CAAA,SAC/D,KAAK,MAAMA,EAAa,WAAa,GAAG,EAAE,IAAA,EACnD,CAAA,EACF,CAAA,EAEJ,EACArI,EAAA,IAAC,SAAA,CACC,QAAS,IAAM0I,EAAc,CAACD,CAAU,EACxC,UAAU,0DAEV,SAAAzI,EAAA,IAAC,MAAA,CACC,UAAW,gCAAgCyI,EAAa,aAAe,EAAE,GACzE,KAAK,OACL,OAAO,eACP,QAAQ,YAER,SAAAzI,EAAA,IAAC,QAAK,cAAc,QAAQ,eAAe,QAAQ,YAAY,IAAI,EAAE,gBAAiB,CAAA,CAAA,CACxF,CAAA,CACF,CAAA,EACF,EAGAD,EAAAA,KAAC,MAAI,CAAA,UAAU,sCACb,SAAA,CAAAA,OAAC,MACC,CAAA,SAAA,CAACC,EAAA,IAAA,OAAA,CAAK,UAAU,gBAAgB,SAAK,QAAA,EACrCD,EAAAA,KAAC,MAAI,CAAA,UAAU,cACZ,SAAA,CAAAyF,EAAS,OAAS,UAAY,SAC9BA,EAAS,OAAS,YAAc,KAChCA,EAAS,OAAS,WAAa,IAC/BA,EAAS,OAAS,YAAc,OAChCA,EAAS,OAAS,eAAiB,KACnCA,EAAS,OAAS,UAAY,KAC9BA,EAAS,OAAS,SAAW,KAAA,EAChC,CAAA,EACF,SACC,MACC,CAAA,SAAA,CAACxF,EAAA,IAAA,OAAA,CAAK,UAAU,gBAAgB,SAAG,MAAA,EACnCD,EAAAA,KAAC,MAAI,CAAA,UAAU,cACZ,SAAA,CAAAyF,EAAS,SAAW,IAAIA,EAAS,QAAQ,KAAO,GAAIA,EAAS,OAAO,GAAA,EACvE,CAAA,EACF,CAAA,EACF,EAGCA,EAAS,kBACPzF,OAAA,MAAA,CAAI,UAAU,qCACb,SAAA,CAACC,EAAA,IAAA,OAAA,CAAK,UAAU,2BAA2B,SAAO,UAAA,EACjDA,EAAA,IAAA,MAAA,CAAI,UAAU,yBAA0B,WAAS,iBAAiB,CAAA,EACrE,EAIDyI,GACC1I,EAAA,KAAC,MAAI,CAAA,UAAU,0BAEZ,SAAA,CAAAyF,EAAS,UAAU,OAAS,GAC3BzF,EAAAA,KAAC,MACC,CAAA,SAAA,CAACC,EAAA,IAAA,KAAA,CAAG,UAAU,yCAAyC,SAAM,SAAA,EAC5DA,EAAA,IAAA,MAAA,CAAI,UAAU,YACZ,WAAS,UAAU,IAAKgG,SACtBD,EAAmC,CAAA,SAAAC,CAAA,EAAbA,EAAS,EAAwB,CACzD,EACH,CAAA,EACF,EAIDR,EAAS,WAAW,OAAS,UAC3B,MACC,CAAA,SAAA,CAACxF,EAAA,IAAA,KAAA,CAAG,UAAU,yCAAyC,SAAU,aAAA,EAChEA,EAAA,IAAA,MAAA,CAAI,UAAU,YACZ,WAAS,WAAW,IAAKgH,SACvBD,EAAqC,CAAA,UAAAC,CAAA,EAAdA,EAAU,EAA0B,CAC7D,EACH,CAAA,EACF,EAIDxB,EAAS,MAAM,OAAS,UACtB,MACC,CAAA,SAAA,CAACxF,EAAA,IAAA,KAAA,CAAG,UAAU,yCAAyC,SAAG,MAAA,EACzDA,EAAA,IAAA,MAAA,CAAI,UAAU,YACZ,WAAS,MAAM,IAAKyH,SAClBD,GAA2B,CAAA,KAAAC,CAAA,EAATA,EAAK,EAAgB,CACzC,EACH,CAAA,EACF,EAIDjC,EAAS,aACPzF,OAAA,MAAA,CAAI,UAAU,sCAAsC,SAAA,CAAA,SAC5CyF,EAAS,YAAY,mBAAmB,OAAO,CAAA,EACxD,CAAA,EAEJ,CAEJ,CAAA,CAAA,CAEJ,EC7Ma0D,GAA2B,IAAM,CACtC,KAAA,CAAE,OAAAlK,GAAWmK,IACbC,EAAWC,IACX,CAAE,YAAAC,EAAa,QAAAnF,EAAS,MAAAV,EAAO,gBAAA8F,EAAiB,mBAAAC,EAAoB,kBAAAC,EAAmB,aAAAC,GAAiBC,IACxG,CAAE,SAAArJ,GAAaC,IACfqJ,EAAezI,SAAO,EAAI,EAC1B,CAAC0I,EAAWC,CAAY,EAAI1K,WAAkC,QAAQ,EACtE,CAAC2K,EAAiBC,CAAkB,EAAI5K,WAAyD,IAAI,EACrG,CAAC6K,EAAeC,CAAgB,EAAI9K,WAAc,IAAI,EACtD,CAAC+K,EAAkBC,CAAmB,EAAIhL,WAAc,IAAI,EAG5DiL,EAAqB,MAAOC,GAAsB,CACtD,GAAKtL,EAED,GAAA,CACI,MAAA0K,EAAa1K,EAAQsL,CAAgB,QACpC7G,EAAO,CACN,QAAA,MAAM,wBAAyBA,CAAK,EAC5C,MAAM,gBAAgB,CACxB,CAAA,EAII8G,EAAiBC,GAA0B,CAC/C,OAAQA,EAAe,CACrB,KAAKC,EAAY,WACf,MAAO,CAAE,OAAQA,EAAY,SAAU,MAAO,MAAO,EACvD,KAAKA,EAAY,SACf,MAAO,CAAE,OAAQA,EAAY,aAAc,MAAO,MAAO,EAC3D,KAAKA,EAAY,aACf,MAAO,CAAE,OAAQA,EAAY,UAAW,MAAO,MAAO,EACxD,QACS,OAAA,IACX,CAAA,EAIIC,EAAwBxG,GAAsD,CAClF8F,EAAmB9F,CAAQ,CAAA,EAwC7B,OArCAzE,EAAAA,UAAU,KACRmK,EAAa,QAAU,GAElB5K,IAEY,SAAY,CACvB,GAAA,CACE4K,EAAa,UACf,MAAML,EAAgBvK,CAAM,EACxB4K,EAAa,SACfJ,EAAmBxK,CAAM,SAGtByE,EAAO,CACN,QAAA,MAAM,uBAAwBA,CAAK,CAC7C,CAAA,KAKK,IAAM,CACXmG,EAAa,QAAU,GACnB,GAAA,CACgBH,UACXhG,EAAO,CACN,QAAA,MAAM,iBAAkBA,CAAK,CACvC,CAAA,GAvBW,QAyBZ,CAACzE,CAAM,CAAC,EAGXS,EAAAA,UAAU,IACD,IAAM,CACXmK,EAAa,QAAU,EAAA,EAExB,CAAE,CAAA,EAEA5K,EAIDmF,EAEAnE,EAAA,IAAC,OAAI,UAAU,gDACb,eAACiJ,EAAe,CAAA,KAAK,IAAK,CAAA,CAC5B,CAAA,EAIAxF,QAEC,MAAI,CAAA,UAAU,2DACb,SAAC1D,EAAA,KAAA,MAAA,CAAI,UAAU,cACb,SAAA,CAACC,EAAA,IAAA,KAAA,CAAG,UAAU,wCAAwC,SAAU,aAAA,EAC/DA,EAAA,IAAA,IAAA,CAAE,UAAU,qBAAsB,SAAMyD,EAAA,EACzCzD,EAAA,IAAC,SAAA,CACC,QAAS,IAAM,CACb4J,EAAa,QAAU,GACnB,GAAA,CACgBH,UACXhG,EAAO,CACN,QAAA,MAAM,wBAAyBA,CAAK,CAC9C,CAGA,WAAW,IAAM,CACX,GAAA,CACF2F,EAAS,QAAQ,QACV3F,EAAO,CACN,QAAA,MAAM,oBAAqBA,CAAK,EACxC,OAAO,SAAS,KAAO,QACzB,GACC,GAAG,CACR,EACA,UAAU,uEACX,SAAA,SAAA,CAED,CAAA,CACF,CAAA,CACF,CAAA,EAIC6F,EAmCHvJ,EAAA,KAAC,MAAI,CAAA,UAAU,0BAEb,SAAA,CAACC,EAAA,IAAA,SAAA,CAAO,UAAU,8CAChB,SAACA,EAAA,IAAA,MAAA,CAAI,UAAU,yCACb,SAAAD,OAAC,MAAI,CAAA,UAAU,yCACb,SAAA,CAACA,EAAAA,KAAA,MAAA,CAAI,UAAU,8BACb,SAAA,CAAAC,EAAA,IAAC,SAAA,CACC,QAAS,IAAM,CACb4J,EAAa,QAAU,GACnB,GAAA,CACgBH,UACXhG,EAAO,CACN,QAAA,MAAM,wBAAyBA,CAAK,CAC9C,CAGA,WAAW,IAAM,CACX,GAAA,CACF2F,EAAS,QAAQ,QACV3F,EAAO,CACN,QAAA,MAAM,oBAAqBA,CAAK,EACxC,OAAO,SAAS,KAAO,QACzB,GACC,GAAG,CACR,EACA,UAAU,0DAEV,SAAAzD,EAAA,IAAC,OAAI,UAAU,UAAU,KAAK,OAAO,OAAO,eAAe,QAAQ,YACjE,eAAC,OAAK,CAAA,cAAc,QAAQ,eAAe,QAAQ,YAAY,IAAI,EAAE,kBAAkB,CACzF,CAAA,CAAA,CACF,SAEC,MACC,CAAA,SAAA,CAAAA,EAAA,IAAC,KAAG,CAAA,UAAU,sCAAuC,SAAAsJ,EAAY,SAAS,EAC1EvJ,EAAAA,KAAC,IAAE,CAAA,UAAU,wBAAwB,SAAA,CAAA,UAC3BuJ,EAAY,OAAO,UAAQA,EAAY,MAAA,EACjD,CAAA,EACF,CAAA,EACF,EAEAvJ,EAAAA,KAAC,MAAI,CAAA,UAAU,8BACX,SAAA,EAAM,IAAA,CACA,MAAA4K,EAAaJ,EAAcjB,EAAY,MAAM,EACnD,OAAOqB,EACL3K,EAAA,IAACC,EAAA,CACC,KAAK,KACL,QAAS,IAAMoK,EAAmBM,EAAW,MAAM,EAElD,SAAWA,EAAA,KAAA,CAEZ,EAAA,IAAA,GACH,EAEH3K,EAAA,IAACC,EAAA,CACC,KAAK,KACL,QAAQ,UACR,QAAS,IAAMmJ,EAAS,UAAUpK,CAAM,WAAW,EACpD,SAAA,SAAA,CAED,EAEAgB,EAAA,IAAC,MAAI,CAAA,UAAU,wBACb,SAAAA,EAAAA,IAAC,QAAK,UAAU,cAAe,SAAUM,GAAA,YAAAA,EAAA,IAAA,CAAK,CAChD,CAAA,CAAA,EACF,CAAA,CACF,CAAA,CACF,CAAA,EACF,QAGC,OAAK,CAAA,UAAU,yCACd,SAACP,EAAA,KAAA,MAAA,CAAI,UAAU,oBACb,SAAA,CAACA,EAAAA,KAAA,MAAA,CAAI,UAAU,wCAEb,SAAA,CAACA,EAAAA,KAAA,MAAA,CAAI,UAAU,iCACb,SAAA,CAACC,EAAA,IAAA,KAAA,CAAG,UAAU,yCAAyC,SAAI,OAAA,EAC3DA,EAAAA,IAAC,MAAI,CAAA,UAAU,OACb,SAAAA,EAAA,IAAC4K,EAAA,CACC,cAAetB,EAAY,cAC3B,iBAAkBA,EAAY,iBAC9B,gBAAiBS,GAAmB,OACpC,cAAAE,EACA,iBAAAE,EACA,qBAAsB,EAAA,CAAA,EAE1B,QACC,MAAI,CAAA,UAAU,6BACb,SAACpK,EAAA,KAAA,MAAA,CAAI,UAAU,oCACb,SAAA,CAACA,EAAAA,KAAA,MAAA,CAAI,UAAU,8BACb,SAAA,CAACA,EAAAA,KAAA,MAAA,CAAI,UAAU,oBACb,SAAA,CAACC,EAAAA,IAAA,MAAA,CAAI,UAAU,sCAAuC,CAAA,EACtDA,EAAAA,IAAC,QAAK,SAAE,IAAA,CAAA,CAAA,EACV,EACAD,EAAAA,KAAC,MAAI,CAAA,UAAU,oBACb,SAAA,CAACC,EAAAA,IAAA,MAAA,CAAI,UAAU,uCAAwC,CAAA,EACvDA,EAAAA,IAAC,QAAK,SAAK,OAAA,CAAA,CAAA,EACb,EACC+J,GACChK,EAAA,KAAC,MAAI,CAAA,UAAU,oBACb,SAAA,CAACC,EAAAA,IAAA,MAAA,CAAI,UAAU,wCAAyC,CAAA,EACxDA,EAAAA,IAAC,QAAK,SAAG,KAAA,CAAA,CAAA,EACX,EAEDiK,GACClK,EAAA,KAAC,MAAI,CAAA,UAAU,oBACb,SAAA,CAACC,EAAAA,IAAA,MAAA,CAAI,UAAU,kCAAmC,CAAA,EAClDA,EAAAA,IAAC,QAAK,SAAG,KAAA,CAAA,CAAA,EACX,CAAA,EAEJ,EACCA,EAAA,IAAA,MAAA,CAAI,UAAU,wBAAwB,SAEvC,iBAAA,CAAA,CAAA,CACF,CACF,CAAA,EAGAA,EAAAA,IAAC,OAAI,UAAU,OACb,eAAC8D,EAAgB,CAAA,iBAAkB4G,EAAsB,CAC3D,CAAA,EAGA1K,EAAAA,IAAC,OAAI,UAAU,OACb,eAACoI,GAAsB,CAAA,SAAUkB,EAAY,aAAA,CAAe,CAC9D,CAAA,EAGAvJ,EAAAA,KAAC,MAAI,CAAA,UAAU,qBACb,SAAA,CAACC,EAAA,IAAA,KAAA,CAAG,UAAU,yCAAyC,SAAS,YAAA,EAChEA,EAAA,IAAC6K,EAAA,CACC,gBAAiBd,GAAmB,OACpC,cAAe,CACb,SAAUT,EAAY,cAAc,SACpC,UAAWA,EAAY,cAAc,SACvC,EACA,gBAAkBwB,GAAU,OAClB,QAAA,IAAI,kBAAmBA,CAAK,EAC5B,QAAA,IAAI,qBAAsBA,GAAA,YAAAA,EAAO,WAAW,EACpD,QAAQ,IAAI,6BAA6BtJ,EAAAsJ,GAAA,YAAAA,EAAO,cAAP,YAAAtJ,EAAoB,MAAM,EACnE0I,EAAiBY,CAAK,CACxB,EACA,kBAAoBA,GAAU,CACpB,QAAA,IAAI,sBAAuBA,CAAK,EACxC,MAAM,gBAAgB,CACxB,EACA,mBAAqBC,GAAa,CACxB,QAAA,IAAI,qBAAsBA,CAAQ,EAC1CX,EAAoBW,CAAQ,CAC9B,CAAA,CACF,CAAA,EACF,CAAA,EACF,EAGAhL,EAAAA,KAAC,MAAI,CAAA,UAAU,iCACb,SAAA,CAACC,EAAA,IAAA,KAAA,CAAG,UAAU,yCAAyC,SAAI,OAAA,EAE1DsJ,EAAY,YAAY,MACtBvJ,EAAA,KAAA,MAAA,CAAI,UAAU,OACb,SAAA,CAACC,EAAA,IAAA,OAAA,CAAK,UAAU,oCAAoC,SAAI,OAAA,QACvD,OAAK,CAAA,UAAU,wBAAyB,SAAAsJ,EAAY,YAAY,KAAK,CAAA,EACxE,EAGDA,EAAY,YAAY,KACtBvJ,EAAA,KAAA,MAAA,CAAI,UAAU,OACb,SAAA,CAACC,EAAA,IAAA,OAAA,CAAK,UAAU,oCAAoC,SAAI,OAAA,EACxDD,EAAAA,KAAC,OAAK,CAAA,UAAU,wBAAyB,SAAA,CAAAuJ,EAAY,YAAY,IAAI,GAAA,EAAC,CAAA,EACxE,EAGDA,EAAY,YAAY,QACtBvJ,EAAA,KAAA,MAAA,CAAI,UAAU,OACb,SAAA,CAACC,EAAA,IAAA,OAAA,CAAK,UAAU,oCAAoC,SAAI,OAAA,EACvDA,EAAA,IAAA,OAAA,CAAK,UAAU,wBACb,WAAY,YAAY,SAAW,OAAS,KAC5CsJ,EAAY,YAAY,SAAW,SAAW,KAAO,MACxD,CAAA,EACF,QAID,MAAI,CAAA,UAAU,gCACb,SAACvJ,EAAA,KAAA,MAAA,CAAI,UAAU,wBACb,SAAA,CAAAC,EAAA,IAAC,SAAA,CACC,QAAS,IAAM8J,EAAa,QAAQ,EACpC,UAAW,4CACTD,IAAc,SACV,8CACA,4EACN,GACD,SAAA,MAAA,CAED,EACA7J,EAAA,IAAC,SAAA,CACC,QAAS,IAAM8J,EAAa,YAAY,EACxC,UAAW,4CACTD,IAAc,aACV,8CACA,4EACN,GACD,SAAA,MAAA,CAED,CAAA,CAAA,CACF,CACF,CAAA,EAGC7J,EAAA,IAAA,MAAA,CAAI,UAAU,OACZ,SAAc6J,IAAA,SACZ7J,EAAAA,IAAAjB,EAAA,CAAoB,OAAAC,CAAiB,CAAA,EAErCgB,EAAAA,IAAAoC,EAAA,CAAmB,OAAApD,CAAiB,CAAA,EAEzC,CAAA,EACF,CAAA,EACF,EAGAe,EAAAA,KAAC,MAAI,CAAA,UAAU,sCACb,SAAA,CAACC,EAAA,IAAA,KAAA,CAAG,UAAU,yCAAyC,SAAS,YAAA,QAC/D,MAAI,CAAA,UAAU,OACb,SAACA,EAAA,IAAAK,EAAA,CAAc,OAAArB,CAAiB,CAAA,EAClC,CAAA,EACF,CAAA,CAAA,CACF,CACF,CAAA,CACF,CAAA,CAAA,QApQG,MAAI,CAAA,UAAU,2DACb,SAACe,EAAA,KAAA,MAAA,CAAI,UAAU,cACb,SAAA,CAACC,EAAA,IAAA,KAAA,CAAG,UAAU,wCAAwC,SAAU,aAAA,EAC/DA,EAAA,IAAA,IAAA,CAAE,UAAU,qBAAqB,SAA4B,+BAAA,EAC9DA,EAAA,IAAC,SAAA,CACC,QAAS,IAAM,CACb4J,EAAa,QAAU,GACnB,GAAA,CACgBH,UACXhG,EAAO,CACN,QAAA,MAAM,wBAAyBA,CAAK,CAC9C,CAGA,WAAW,IAAM,CACX,GAAA,CACF2F,EAAS,QAAQ,QACV3F,EAAO,CACN,QAAA,MAAM,oBAAqBA,CAAK,EACxC,OAAO,SAAS,KAAO,QACzB,GACC,GAAG,CACR,EACA,UAAU,uEACX,SAAA,SAAA,CAED,CAAA,CACF,CAAA,CACF,CAAA,EA3EMzD,EAAAA,IAAAgL,EAAA,CAAS,GAAG,SAAS,QAAO,EAAC,CAAA,CAqTzC"}